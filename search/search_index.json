{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction PyProteinInference is a Python package for running various protein inference algorithms on tandem mass spectrometry search results and generating protein to peptide mappings with protein level false discovery rates. For a quick start guide please click here . Key Features Protein Inference and Scoring : Maps peptides to proteins. Generates protein scores from provided PSMs. Calculates set-based protein-level false discovery rates for MS data filtering. Supported Input Formats : Search Result File Types: idXML , mzIdentML , or pepXML . PSM files from Percolator . Custom tab-delimited files . Output : User-friendly CSV file containing Proteins, Peptides, q-values, and Protein Scores. Details on output formats: supplementary . Supported Inference Procedures : Parsimony Exclusion Inclusion Peptide Centric (Protein Group Level) Please see the Inference Types section for more information on Inference Types. In Addition to these inference types Py Protein Inference can also score proteins with a variety of methods: Best Peptide Per Protein Takes the best scoring PSM as the protein score. Multiplicative Log Multiplies each PSM score per protein and takes -log10 of the combined score (smaller psm scores must be better i.e. Pep or Q values). Top Two Combined Takes the top two best scoring PSMs and multiplies or adds them together based on if the selected psm score is Pep/Q value style or Mascot Ion Score style. Additive Adds each PSM score per protein (larger psm scores must be better i.e. Xcorr, Mascot Ion Score, Percolator Score). Down Weighted Multiplicative Log Multiplicative Log but with a normalization against the number of PSMs. Iterative Down Weighted Log Multiplicative Log but with an iterative normalization against the number of PSMs. Geometric Mean Geometric Mean algorithm scoring. Please see the Protein Score Types section for more information on scoring algorithms. Using Py Protein Inference Yaml Parameter File Input File Examples (idXML, mzIdentML, pepXML, Tab Delimited) Fasta Database Running Py Protein Inference","title":"Home"},{"location":"#introduction","text":"PyProteinInference is a Python package for running various protein inference algorithms on tandem mass spectrometry search results and generating protein to peptide mappings with protein level false discovery rates. For a quick start guide please click here . Key Features Protein Inference and Scoring : Maps peptides to proteins. Generates protein scores from provided PSMs. Calculates set-based protein-level false discovery rates for MS data filtering. Supported Input Formats : Search Result File Types: idXML , mzIdentML , or pepXML . PSM files from Percolator . Custom tab-delimited files . Output : User-friendly CSV file containing Proteins, Peptides, q-values, and Protein Scores. Details on output formats: supplementary . Supported Inference Procedures : Parsimony Exclusion Inclusion Peptide Centric (Protein Group Level) Please see the Inference Types section for more information on Inference Types. In Addition to these inference types Py Protein Inference can also score proteins with a variety of methods: Best Peptide Per Protein Takes the best scoring PSM as the protein score. Multiplicative Log Multiplies each PSM score per protein and takes -log10 of the combined score (smaller psm scores must be better i.e. Pep or Q values). Top Two Combined Takes the top two best scoring PSMs and multiplies or adds them together based on if the selected psm score is Pep/Q value style or Mascot Ion Score style. Additive Adds each PSM score per protein (larger psm scores must be better i.e. Xcorr, Mascot Ion Score, Percolator Score). Down Weighted Multiplicative Log Multiplicative Log but with a normalization against the number of PSMs. Iterative Down Weighted Log Multiplicative Log but with an iterative normalization against the number of PSMs. Geometric Mean Geometric Mean algorithm scoring. Please see the Protein Score Types section for more information on scoring algorithms.","title":"Introduction"},{"location":"#using-py-protein-inference","text":"Yaml Parameter File Input File Examples (idXML, mzIdentML, pepXML, Tab Delimited) Fasta Database Running Py Protein Inference","title":"Using Py Protein Inference"},{"location":"advanced/","text":"Running Py Protein Inference Main Inference Method Heuristic Running the Main Py Protein Inference Method Running Via Command Line Upon proper installation of the package, the command line tool should be installed and should be available from any location on the system. The command line tool can be called as follows: protein_inference_cli.py --help This will return the help prompt for the tool. If this does not work download protein_inference_cli.py from our repository and write the full path to the script while also calling python : python /path/to/directory/pyproteininference/scripts/protein_inference_cli.py --help Command line options are as follows: cli$ python protein_inference_cli.py --help usage: protein_inference_cli.py [-h] [-t FILE [FILE ...]] [-d FILE [FILE ...]] [-f FILE [FILE ...]] [-o DIR] [-l FILE] [-a DIR] [-b DIR] [-c DIR] [-db FILE] [-y FILE] [-p] [-i] Protein Inference optional arguments: -h, --help show this help message and exit -t FILE [FILE ...], --target FILE [FILE ...] Input target psm output from percolator. Can either input one file or a list of files. -d FILE [FILE ...], --decoy FILE [FILE ...] Input decoy psm output from percolator. Can either input one file or a list of files. -f FILE [FILE ...], --combined_files FILE [FILE ...] Input combined psm search results in idXML, mzIdentML, pepXML, or tab delimited format. This should contain Target and Decoy PSMS. \" Can either input one file or a list of files. -o DIR, --output DIR Result Directory to write to - the name of file will be determined by parameters selected and tag parameter. If this option is not set, will write results to current working directory. -l FILE, --output_filename FILE Filename to write results to. Can be left blank. If this flag is left blank the filename will be automatically generated. If set this flag will override -o. -a DIR, --target_directory DIR Directory that contains either .txt or .tsv input target psm data. Make sure the directory ONLY contains result files. -b DIR, --decoy_directory DIR Directory that contains either .txt or .tsv input decoy psm data. Make sure the directory ONLY contains result files. -c DIR, --combined_directory DIR Directory that contains either .txt or .tsv input data with targets/decoys combined. Make sure the directory ONLY contains result files. -db FILE, --database FILE Path to the fasta formatted database used in the MS search. This is optional. If not set, will use the proteins only in the input files. -y FILE, --yaml_params FILE Path to a Protein Inference Yaml Parameter File. If this is not set, default parameters will be used. -p, --skip_append_alt Advanced usage only. If this flag is set, will skip adding alternative proteins to each PSM from the database digest. If this flag is not set, the peptide/protein mapping will be taken from database digest and appended to the mapping present in the input files. -i, --id_splitting Advanced usage only. If set this flag will split protein identifiers.If not set, this flag will not split protein identifiers.Sometimes the fasta database protein IDs are formatted as: 'sp|ARAF_HUMAN|P10398'. While protein IDs in the input files are formatted as 'ARAF_HUMAN|P10398'. Setting This flag will split off the front 'sp|' or 'tr|' from the database protein identifiers. The following combinations of input are allowed and at least one combination is required: -t -d Path to input target ( -t ) and decoy ( -d ) files. This can be one target and one decoy file or multiple files separated by spaces (\" \"). See here for information on target/decoy input files. -a -b Path to input target ( -a ) and decoy ( -b ) directories that contain target and decoy files. This is one directory each and all .txt and .tsv files will be read in as input. -f Path to input combined target/decoy ( -f ) files. This can be one file or multiple files separated by spaces (\" \"). Use this option if your input is .mzIdentML, idXML, or pepXML. -c Path to input combined target/decoy ( -c ) directory that contain combined target/decoy files. This is one directory each and all .txt and .tsv files will be read in as input. Any other combinations will result in an Error raised. Optional flags -db Path to Fasta Database file. -y Path to Protein Inference Yaml Parameter file. (If this is not supplied default parameters will be used). -o Path to the output directory, if this is left blank files will be written to the current working directory. -l Path to the output filename, if this is left blank a filename will be automatically generated and will be written to directory as set in -o . Will override -o flag if set. Advanced usage flags -p This flag is a True/False on whether to skip appending alternative proteins from the Fasta database digestion. If this flag is left blank, it will not skip appending alternative proteins (recommended). -i True/False on whether to split the IDs in the Fasta database file. If this is left blank, it will not split IDs in the Fasta database file (recommended). You can run the tool as follows with separate target and decoy files: protein_inference_cli.py \\ -t /path/to/target/file.txt \\ -d /path/to/decoy/file.txt \\ -db /path/to/database/file.fasta \\ -y /path/to/parameter/file.yaml \\ -o /path/to/output/directory/ Or from combined files like an mzIdentML file: protein_inference_cli.py \\ -f /path/to/target/file.mzid \\ -db /path/to/database/file.fasta \\ -y /path/to/parameter/file.yaml \\ -o /path/to/output/directory/ Running with multiple input target/decoy files: protein_inference_cli.py \\ -t /path/to/target/file1.txt /path/to/target/file2.txt \\ -d /path/to/decoy/file1.txt /path/to/decoy/file2.txt \\ -db /path/to/database/file.fasta \\ -y /path/to/parameter/file.yaml \\ -o /path/to/output/directory/ Or from multiple mzIdentML / idXML / pepXML files: protein_inference_cli.py \\ -f /path/to/target/file1.mzid /path/to/target/file2.mzid \\ -db /path/to/database/file.fasta \\ -y /path/to/parameter/file.yaml \\ -o /path/to/output/directory/ Running Within Python To run within a python console please see the following example: from pyproteininference.pipeline import ProteinInferencePipeline yaml_params = \"/path/to/yaml/params.yaml\" database = \"/path/to/database/file.fasta\" ### target_files can either be a list of files or one file target_files = [\"/path/to/target1.txt\",\"/path/to/target2.txt\"] ### decoy_files can either be a list of files or one file decoy_files = [\"/path/to/decoy1.txt\",\"/path/to/decoy2.txt\"] output_directory_name = \"/path/to/output/directory/\" pipeline = ProteinInferencePipeline(parameter_file=yaml_params, database_file=database, target_files=target_files, decoy_files=decoy_files, combined_files=None, output_directory=output_directory_name) # Calling .execute() will initiate the pipeline with the given data pipeline.execute() Or running mzIdentML files within python: from pyproteininference.pipeline import ProteinInferencePipeline yaml_params = \"/path/to/yaml/params.yaml\" database = \"/path/to/database/file.fasta\" ### target_files can either be a list of files or one file mzid_files = [\"/path/to/file1.mzid\",\"/path/to/file2.mzid\"] ### decoy_files can either be a list of files or one file output_directory_name = \"/path/to/output/directory/\" pipeline = ProteinInferencePipeline(parameter_file=yaml_params, database_file=database, target_files=None, decoy_files=None, combined_files=mzid_files, output_directory=output_directory_name) # Calling .execute() will initiate the pipeline with the given data pipeline.execute() Running the Heuristic Method NOTE: The Heuristic Method is experimental and has not be extensively tested on multiple datasets yet. Check back for updates on this tool. Py Protein Inference also has a built-in Heuristic that runs through four inference methods (Inclusion, Exclusion, Parsimony, and Peptide Centric) and selects a recommended method for your given dataset. By default, all four result files will be written, and the optimal method will be highlighted to the user. The Heuristic method also outputs a density plot that showcases all the inference methods compared to one another to gain further insight. For more information on the Heuristic Method see the Heuristic algorithm section. Running the Heuristic Method via the Command Line python protein_inference_heuristic_cli.py --help This will return the help prompt for the tool. If this does not work download protein_inference_heuristic_cli.py from the repository and write the full path to the script while also calling python . python /path/to/directory/pyproteininference/scripts/protein_inference_heuristic_cli.py --help Command line options are as follows: cli$ python protein_inference_heuristic_cli.py --help usage: protein_inference_heuristic_cli.py [-h] [-t FILE [FILE ...]] [-d FILE [FILE ...]] [-f FILE [FILE ...]] [-o DIR] [-l FILE] [-a DIR] [-b DIR] [-c DIR] [-db FILE] [-y FILE] [-p] [-i] [-r FILE] [-m FLOAT] [-u STR] Protein Inference Heuristic optional arguments: -h, --help show this help message and exit -t FILE [FILE ...], --target FILE [FILE ...] Input target psm output from percolator. Can either input one file or a list of files. -d FILE [FILE ...], --decoy FILE [FILE ...] Input decoy psm output from percolator. Can either input one file or a list of files. -f FILE [FILE ...], --combined_files FILE [FILE ...] Input combined psm output from percolator. This should contain Target and Decoy PSMS. Can either input one file or a list of files. -o DIR, --output DIR Result Directory to write to - the name of file will be determined by parameters selected and tag parameter. If this option is not set, will write results to current working directory. -l FILE, --output_filename FILE Filename to write results to. Can be left blank. If this flag is left blank the filename will be automatically generated. If set this flag will override -o. -a DIR, --target_directory DIR Directory that contains either .txt or .tsv input target psm data. Make sure the directory ONLY contains result files. -b DIR, --decoy_directory DIR Directory that contains either .txt or .tsv input decoy psm data. Make sure the directory ONLY contains. result files. -c DIR, --combined_directory DIR Directory that contains either .txt or .tsv input data with targets/decoys combined. Make sure the directory ONLY contains result files. -db FILE, --database FILE Path to the fasta formatted database used in the MS search. This is optional. If not set, will use the proteins only in the input files. -y FILE, --yaml_params FILE Path to a Protein Inference Yaml Parameter File. If this is not set, default parameters will be used. -p, --skip_append_alt Advanced usage only. If this flag is set, will skip adding alternative proteins to each PSM from the database digest. If this flag is not set, the peptide/protein mapping will be taken from database digest and appended to the mapping present in the input files. -i, --id_splitting Advanced usage only. If set this flag will split protein identifiers.If not set, this flag will not split protein identifiers.Sometimes the fasta database protein IDs are formatted as: 'sp|ARAF_HUMAN|P10398'. While protein IDs in the input files are formatted as 'ARAF_HUMAN|P10398'. Setting This flag will split off the front 'sp|' or 'tr|' from the database protein identifiers. -r FILE, --pdf_filename FILE PDF Filepath to write the Heuristic plot to after Heuristic Scoring. If not set, writes the file with filename heuristic_plot.pdf to directory set in -o. If -o is not set, will write the file to current working directory. -m FLOAT, --fdr_threshold FLOAT The FDR threshold to use in the Heuristic Method. Defaults to 0.05 if not set. -u STR, --output_type STR The type of output to be written. Can either be 'all' or 'optimal'. If set to 'all' will output all inference results. If set to 'optimal' will output only the result selected by the heuristic method. If left blank this will default to 'all'. Input options are the same as the standard protein_inference_cli.py with the addition of three optional inputs: 1. -r This is a filepath that will have a density plot written to it after the heuristic method has been run. If this is left blank, it will write the plot into the standard output directory with the name heuristic_plot.pdf 2. -m The FDR threshold to use in the Heuristic Method. The method will use values from 0 to the FDR threshold. If this value is left blank, it will be set to 0.05 3. -u This is the type of output to be written after the heuristic method is complete. Will either output all results or the optimal results. If all is selected, the optimal results will have the string \"optimal_method\" spliced into the filename. You can run the tool as follows: protein_inference_heuristic_cli.py \\ -t /path/to/target/file.txt \\ -d /path/to/decoy/file.txt \\ -db /path/to/database/file.fasta \\ -y /path/to/parameter/file.yaml \\ -o /path/to/output/directory/ \\ -r /path/to/pdf/file.pdf \\ -m 0.05 Running with multiple input target/decoy files: protein_inference_heuristic_cli.py \\ -t /path/to/target/file1.txt /path/to/target/file2.txt \\ -d /path/to/decoy/file1.txt /path/to/decoy/file2.txt \\ -db /path/to/database/file.fasta \\ -y /path/to/parameter/file.yaml \\ -o /path/to/output/directory/ \\ -r /path/to/pdf/file.pdf \\ -m 0.05 Running the Heuristic Method via Python To run within a python console please see the following example: from pyproteininference.heuristic import HeuristicPipeline yaml_params = \"/path/to/yaml/params.yaml\" database = \"/path/to/database/file.fasta\" ### target_files can either be a list of files or one file target_files = [\"/path/to/target1.txt\",\"/path/to/target2.txt\"] ### decoy_files can either be a list of files or one file decoy_files = [\"/path/to/decoy1.txt\",\"/path/to/decoy2.txt\"] output_directory_name = \"/path/to/output/directory/\" pdf_filename = \"/path/to/output/directory/heuristic_plot.pdf\" hp = HeuristicPipeline(parameter_file=yaml_params, database_file=database, target_files=target_files, decoy_files=decoy_files, combined_files=None, output_directory=output_directory_name, pdf_filename=pdf_filename, output_type=\"all\") # Calling .execute() will initiate the heuristic pipeline with the given data # The suggested method will be output in the console and the suggested method results will be written into the output_directory hp.execute(fdr_threshold=0.05) # The optimal inference method and density plot can be generated separately as well with the following to specify thresholds directly: hp.determine_optimal_inference_method(false_discovery_rate_threshold=0.05, upper_empirical_threshold=1, lower_empirical_threshold=.5, pdf_filename=None) Heuristic Output Example Console Output Console Output is as follows and indicates the recommended method at the end: 2022-05-12 17:28:38,413 - pyproteininference.heuristic - INFO - Heuristic Scores 2022-05-12 17:28:38,413 - pyproteininference.heuristic - INFO - {'inclusion': 1.2145313335009247, 'exclusion': 1.053616485888155, 'parsimony': 0.5416878942666304, 'peptide_centric': 0.24465822235367252} 2022-05-12 17:28:38,413 - pyproteininference.heuristic - INFO - Either parsimony 0.5416878942666304 or peptide centric 0.24465822235367252 pass empirical threshold 0.5. Selecting the best method of the two. 2022-05-12 17:28:38,413 - pyproteininference.heuristic - INFO - Method peptide_centric selected with the heuristic algorithm Heuristic Density Plot Output Below is an example of a Heuristic Density plot. The plot indicates the distribution of the number of standard deviations from the mean (of identified proteins at a specified FDR) for each inference method for a range of FDRs from 0 to the false discovery rate threshold (100 fdrs are incrementally selected in the range [0, fdr threshold]) In general, the closer that the peak of a distribution is to 0 the more likely the associated method is to be selected as the recommended method. For more information on the specifics of the Heuristic Algorithm see Heuristic Algorithm Description","title":"Advanced Usage"},{"location":"advanced/#running-py-protein-inference","text":"Main Inference Method Heuristic","title":"Running Py Protein Inference"},{"location":"advanced/#running-the-main-py-protein-inference-method","text":"","title":"Running the Main Py Protein Inference Method"},{"location":"advanced/#running-via-command-line","text":"Upon proper installation of the package, the command line tool should be installed and should be available from any location on the system. The command line tool can be called as follows: protein_inference_cli.py --help This will return the help prompt for the tool. If this does not work download protein_inference_cli.py from our repository and write the full path to the script while also calling python : python /path/to/directory/pyproteininference/scripts/protein_inference_cli.py --help Command line options are as follows: cli$ python protein_inference_cli.py --help usage: protein_inference_cli.py [-h] [-t FILE [FILE ...]] [-d FILE [FILE ...]] [-f FILE [FILE ...]] [-o DIR] [-l FILE] [-a DIR] [-b DIR] [-c DIR] [-db FILE] [-y FILE] [-p] [-i] Protein Inference optional arguments: -h, --help show this help message and exit -t FILE [FILE ...], --target FILE [FILE ...] Input target psm output from percolator. Can either input one file or a list of files. -d FILE [FILE ...], --decoy FILE [FILE ...] Input decoy psm output from percolator. Can either input one file or a list of files. -f FILE [FILE ...], --combined_files FILE [FILE ...] Input combined psm search results in idXML, mzIdentML, pepXML, or tab delimited format. This should contain Target and Decoy PSMS. \" Can either input one file or a list of files. -o DIR, --output DIR Result Directory to write to - the name of file will be determined by parameters selected and tag parameter. If this option is not set, will write results to current working directory. -l FILE, --output_filename FILE Filename to write results to. Can be left blank. If this flag is left blank the filename will be automatically generated. If set this flag will override -o. -a DIR, --target_directory DIR Directory that contains either .txt or .tsv input target psm data. Make sure the directory ONLY contains result files. -b DIR, --decoy_directory DIR Directory that contains either .txt or .tsv input decoy psm data. Make sure the directory ONLY contains result files. -c DIR, --combined_directory DIR Directory that contains either .txt or .tsv input data with targets/decoys combined. Make sure the directory ONLY contains result files. -db FILE, --database FILE Path to the fasta formatted database used in the MS search. This is optional. If not set, will use the proteins only in the input files. -y FILE, --yaml_params FILE Path to a Protein Inference Yaml Parameter File. If this is not set, default parameters will be used. -p, --skip_append_alt Advanced usage only. If this flag is set, will skip adding alternative proteins to each PSM from the database digest. If this flag is not set, the peptide/protein mapping will be taken from database digest and appended to the mapping present in the input files. -i, --id_splitting Advanced usage only. If set this flag will split protein identifiers.If not set, this flag will not split protein identifiers.Sometimes the fasta database protein IDs are formatted as: 'sp|ARAF_HUMAN|P10398'. While protein IDs in the input files are formatted as 'ARAF_HUMAN|P10398'. Setting This flag will split off the front 'sp|' or 'tr|' from the database protein identifiers. The following combinations of input are allowed and at least one combination is required: -t -d Path to input target ( -t ) and decoy ( -d ) files. This can be one target and one decoy file or multiple files separated by spaces (\" \"). See here for information on target/decoy input files. -a -b Path to input target ( -a ) and decoy ( -b ) directories that contain target and decoy files. This is one directory each and all .txt and .tsv files will be read in as input. -f Path to input combined target/decoy ( -f ) files. This can be one file or multiple files separated by spaces (\" \"). Use this option if your input is .mzIdentML, idXML, or pepXML. -c Path to input combined target/decoy ( -c ) directory that contain combined target/decoy files. This is one directory each and all .txt and .tsv files will be read in as input. Any other combinations will result in an Error raised. Optional flags -db Path to Fasta Database file. -y Path to Protein Inference Yaml Parameter file. (If this is not supplied default parameters will be used). -o Path to the output directory, if this is left blank files will be written to the current working directory. -l Path to the output filename, if this is left blank a filename will be automatically generated and will be written to directory as set in -o . Will override -o flag if set. Advanced usage flags -p This flag is a True/False on whether to skip appending alternative proteins from the Fasta database digestion. If this flag is left blank, it will not skip appending alternative proteins (recommended). -i True/False on whether to split the IDs in the Fasta database file. If this is left blank, it will not split IDs in the Fasta database file (recommended). You can run the tool as follows with separate target and decoy files: protein_inference_cli.py \\ -t /path/to/target/file.txt \\ -d /path/to/decoy/file.txt \\ -db /path/to/database/file.fasta \\ -y /path/to/parameter/file.yaml \\ -o /path/to/output/directory/ Or from combined files like an mzIdentML file: protein_inference_cli.py \\ -f /path/to/target/file.mzid \\ -db /path/to/database/file.fasta \\ -y /path/to/parameter/file.yaml \\ -o /path/to/output/directory/ Running with multiple input target/decoy files: protein_inference_cli.py \\ -t /path/to/target/file1.txt /path/to/target/file2.txt \\ -d /path/to/decoy/file1.txt /path/to/decoy/file2.txt \\ -db /path/to/database/file.fasta \\ -y /path/to/parameter/file.yaml \\ -o /path/to/output/directory/ Or from multiple mzIdentML / idXML / pepXML files: protein_inference_cli.py \\ -f /path/to/target/file1.mzid /path/to/target/file2.mzid \\ -db /path/to/database/file.fasta \\ -y /path/to/parameter/file.yaml \\ -o /path/to/output/directory/","title":"Running Via Command Line"},{"location":"advanced/#running-within-python","text":"To run within a python console please see the following example: from pyproteininference.pipeline import ProteinInferencePipeline yaml_params = \"/path/to/yaml/params.yaml\" database = \"/path/to/database/file.fasta\" ### target_files can either be a list of files or one file target_files = [\"/path/to/target1.txt\",\"/path/to/target2.txt\"] ### decoy_files can either be a list of files or one file decoy_files = [\"/path/to/decoy1.txt\",\"/path/to/decoy2.txt\"] output_directory_name = \"/path/to/output/directory/\" pipeline = ProteinInferencePipeline(parameter_file=yaml_params, database_file=database, target_files=target_files, decoy_files=decoy_files, combined_files=None, output_directory=output_directory_name) # Calling .execute() will initiate the pipeline with the given data pipeline.execute() Or running mzIdentML files within python: from pyproteininference.pipeline import ProteinInferencePipeline yaml_params = \"/path/to/yaml/params.yaml\" database = \"/path/to/database/file.fasta\" ### target_files can either be a list of files or one file mzid_files = [\"/path/to/file1.mzid\",\"/path/to/file2.mzid\"] ### decoy_files can either be a list of files or one file output_directory_name = \"/path/to/output/directory/\" pipeline = ProteinInferencePipeline(parameter_file=yaml_params, database_file=database, target_files=None, decoy_files=None, combined_files=mzid_files, output_directory=output_directory_name) # Calling .execute() will initiate the pipeline with the given data pipeline.execute()","title":"Running Within Python"},{"location":"advanced/#running-the-heuristic-method","text":"NOTE: The Heuristic Method is experimental and has not be extensively tested on multiple datasets yet. Check back for updates on this tool. Py Protein Inference also has a built-in Heuristic that runs through four inference methods (Inclusion, Exclusion, Parsimony, and Peptide Centric) and selects a recommended method for your given dataset. By default, all four result files will be written, and the optimal method will be highlighted to the user. The Heuristic method also outputs a density plot that showcases all the inference methods compared to one another to gain further insight. For more information on the Heuristic Method see the Heuristic algorithm section.","title":"Running the Heuristic Method"},{"location":"advanced/#running-the-heuristic-method-via-the-command-line","text":"python protein_inference_heuristic_cli.py --help This will return the help prompt for the tool. If this does not work download protein_inference_heuristic_cli.py from the repository and write the full path to the script while also calling python . python /path/to/directory/pyproteininference/scripts/protein_inference_heuristic_cli.py --help Command line options are as follows: cli$ python protein_inference_heuristic_cli.py --help usage: protein_inference_heuristic_cli.py [-h] [-t FILE [FILE ...]] [-d FILE [FILE ...]] [-f FILE [FILE ...]] [-o DIR] [-l FILE] [-a DIR] [-b DIR] [-c DIR] [-db FILE] [-y FILE] [-p] [-i] [-r FILE] [-m FLOAT] [-u STR] Protein Inference Heuristic optional arguments: -h, --help show this help message and exit -t FILE [FILE ...], --target FILE [FILE ...] Input target psm output from percolator. Can either input one file or a list of files. -d FILE [FILE ...], --decoy FILE [FILE ...] Input decoy psm output from percolator. Can either input one file or a list of files. -f FILE [FILE ...], --combined_files FILE [FILE ...] Input combined psm output from percolator. This should contain Target and Decoy PSMS. Can either input one file or a list of files. -o DIR, --output DIR Result Directory to write to - the name of file will be determined by parameters selected and tag parameter. If this option is not set, will write results to current working directory. -l FILE, --output_filename FILE Filename to write results to. Can be left blank. If this flag is left blank the filename will be automatically generated. If set this flag will override -o. -a DIR, --target_directory DIR Directory that contains either .txt or .tsv input target psm data. Make sure the directory ONLY contains result files. -b DIR, --decoy_directory DIR Directory that contains either .txt or .tsv input decoy psm data. Make sure the directory ONLY contains. result files. -c DIR, --combined_directory DIR Directory that contains either .txt or .tsv input data with targets/decoys combined. Make sure the directory ONLY contains result files. -db FILE, --database FILE Path to the fasta formatted database used in the MS search. This is optional. If not set, will use the proteins only in the input files. -y FILE, --yaml_params FILE Path to a Protein Inference Yaml Parameter File. If this is not set, default parameters will be used. -p, --skip_append_alt Advanced usage only. If this flag is set, will skip adding alternative proteins to each PSM from the database digest. If this flag is not set, the peptide/protein mapping will be taken from database digest and appended to the mapping present in the input files. -i, --id_splitting Advanced usage only. If set this flag will split protein identifiers.If not set, this flag will not split protein identifiers.Sometimes the fasta database protein IDs are formatted as: 'sp|ARAF_HUMAN|P10398'. While protein IDs in the input files are formatted as 'ARAF_HUMAN|P10398'. Setting This flag will split off the front 'sp|' or 'tr|' from the database protein identifiers. -r FILE, --pdf_filename FILE PDF Filepath to write the Heuristic plot to after Heuristic Scoring. If not set, writes the file with filename heuristic_plot.pdf to directory set in -o. If -o is not set, will write the file to current working directory. -m FLOAT, --fdr_threshold FLOAT The FDR threshold to use in the Heuristic Method. Defaults to 0.05 if not set. -u STR, --output_type STR The type of output to be written. Can either be 'all' or 'optimal'. If set to 'all' will output all inference results. If set to 'optimal' will output only the result selected by the heuristic method. If left blank this will default to 'all'. Input options are the same as the standard protein_inference_cli.py with the addition of three optional inputs: 1. -r This is a filepath that will have a density plot written to it after the heuristic method has been run. If this is left blank, it will write the plot into the standard output directory with the name heuristic_plot.pdf 2. -m The FDR threshold to use in the Heuristic Method. The method will use values from 0 to the FDR threshold. If this value is left blank, it will be set to 0.05 3. -u This is the type of output to be written after the heuristic method is complete. Will either output all results or the optimal results. If all is selected, the optimal results will have the string \"optimal_method\" spliced into the filename. You can run the tool as follows: protein_inference_heuristic_cli.py \\ -t /path/to/target/file.txt \\ -d /path/to/decoy/file.txt \\ -db /path/to/database/file.fasta \\ -y /path/to/parameter/file.yaml \\ -o /path/to/output/directory/ \\ -r /path/to/pdf/file.pdf \\ -m 0.05 Running with multiple input target/decoy files: protein_inference_heuristic_cli.py \\ -t /path/to/target/file1.txt /path/to/target/file2.txt \\ -d /path/to/decoy/file1.txt /path/to/decoy/file2.txt \\ -db /path/to/database/file.fasta \\ -y /path/to/parameter/file.yaml \\ -o /path/to/output/directory/ \\ -r /path/to/pdf/file.pdf \\ -m 0.05","title":"Running the Heuristic Method via the Command Line"},{"location":"advanced/#running-the-heuristic-method-via-python","text":"To run within a python console please see the following example: from pyproteininference.heuristic import HeuristicPipeline yaml_params = \"/path/to/yaml/params.yaml\" database = \"/path/to/database/file.fasta\" ### target_files can either be a list of files or one file target_files = [\"/path/to/target1.txt\",\"/path/to/target2.txt\"] ### decoy_files can either be a list of files or one file decoy_files = [\"/path/to/decoy1.txt\",\"/path/to/decoy2.txt\"] output_directory_name = \"/path/to/output/directory/\" pdf_filename = \"/path/to/output/directory/heuristic_plot.pdf\" hp = HeuristicPipeline(parameter_file=yaml_params, database_file=database, target_files=target_files, decoy_files=decoy_files, combined_files=None, output_directory=output_directory_name, pdf_filename=pdf_filename, output_type=\"all\") # Calling .execute() will initiate the heuristic pipeline with the given data # The suggested method will be output in the console and the suggested method results will be written into the output_directory hp.execute(fdr_threshold=0.05) # The optimal inference method and density plot can be generated separately as well with the following to specify thresholds directly: hp.determine_optimal_inference_method(false_discovery_rate_threshold=0.05, upper_empirical_threshold=1, lower_empirical_threshold=.5, pdf_filename=None)","title":"Running the Heuristic Method via Python"},{"location":"advanced/#heuristic-output-example","text":"","title":"Heuristic Output Example"},{"location":"advanced/#console-output","text":"Console Output is as follows and indicates the recommended method at the end: 2022-05-12 17:28:38,413 - pyproteininference.heuristic - INFO - Heuristic Scores 2022-05-12 17:28:38,413 - pyproteininference.heuristic - INFO - {'inclusion': 1.2145313335009247, 'exclusion': 1.053616485888155, 'parsimony': 0.5416878942666304, 'peptide_centric': 0.24465822235367252} 2022-05-12 17:28:38,413 - pyproteininference.heuristic - INFO - Either parsimony 0.5416878942666304 or peptide centric 0.24465822235367252 pass empirical threshold 0.5. Selecting the best method of the two. 2022-05-12 17:28:38,413 - pyproteininference.heuristic - INFO - Method peptide_centric selected with the heuristic algorithm","title":"Console Output"},{"location":"advanced/#heuristic-density-plot-output","text":"Below is an example of a Heuristic Density plot. The plot indicates the distribution of the number of standard deviations from the mean (of identified proteins at a specified FDR) for each inference method for a range of FDRs from 0 to the false discovery rate threshold (100 fdrs are incrementally selected in the range [0, fdr threshold]) In general, the closer that the peak of a distribution is to 0 the more likely the associated method is to be selected as the recommended method. For more information on the specifics of the Heuristic Algorithm see Heuristic Algorithm Description","title":"Heuristic Density Plot Output"},{"location":"input_format/","text":"Input File Examples Usage with idXML, mzIdentML, pepXML, or Percolator Output See below for specific assistance in running pyProteinInference from either an idXML, mzIdentML, pepXML, or Percolator File. idXML First, lets take a look at an idXML file from the popular OpenMS framework When inspecting an idXML you might see the following: <PeptideHit score=\"6.1267e-05\" sequence=\"KDVDDDGEEK\" charge=\"2\" aa_before=\"K\" aa_after=\"E\" start=\"85\" end=\"94\" protein_refs=\"PH_23231\" > <UserParam type=\"string\" name=\"target_decoy\" value=\"target\"/> <UserParam type=\"string\" name=\"MS:1002258\" value=\"16\"/> <UserParam type=\"string\" name=\"MS:1002259\" value=\"18\"/> <UserParam type=\"string\" name=\"num_matched_peptides\" value=\"514\"/> <UserParam type=\"int\" name=\"isotope_error\" value=\"0\"/> <UserParam type=\"float\" name=\"MS:1002252\" value=\"2.0533\"/> <UserParam type=\"float\" name=\"COMET:xcorr\" value=\"2.0533\"/> <UserParam type=\"float\" name=\"MS:1002253\" value=\"0.5447\"/> <UserParam type=\"float\" name=\"COMET:deltaCn\" value=\"0.5447\"/> <UserParam type=\"float\" name=\"MS:1002255\" value=\"825.899999999999977\"/> <UserParam type=\"float\" name=\"COMET:spscore\" value=\"825.899999999999977\"/> <UserParam type=\"float\" name=\"MS:1002256\" value=\"1.0\"/> <UserParam type=\"float\" name=\"COMET:sprank\" value=\"1.0\"/> <UserParam type=\"float\" name=\"MS:1002257\" value=\"3.3e-05\"/> <UserParam type=\"string\" name=\"protein_references\" value=\"unique\"/> <UserParam type=\"float\" name=\"COMET:deltaLCn\" value=\"0.0\"/> <UserParam type=\"float\" name=\"COMET:lnExpect\" value=\"-10.319002996497794\"/> <UserParam type=\"float\" name=\"COMET:lnNumSP\" value=\"6.242223265455165\"/> <UserParam type=\"float\" name=\"COMET:lnRankSP\" value=\"0.0\"/> <UserParam type=\"float\" name=\"COMET:IonFrac\" value=\"0.888888888888889\"/> <UserParam type=\"float\" name=\"expect\" value=\"3.3e-05\"/> <UserParam type=\"float\" name=\"MS:1001492\" value=\"0.647488\"/> <UserParam type=\"float\" name=\"MS:1001491\" value=\"6.1267e-05\"/> <UserParam type=\"float\" name=\"MS:1001493\" value=\"9.83689e-05\"/> </PeptideHit> In this case we see that a Comet search was performed. For selecting an input PSM score for rolling up to the protein level, you insert one of these selected UserParam names into the pyProteinInference parameter file in the score section. For example, lets say you wanted to use the Comet:xcorr value (for Comet Xcorr a higher score is better). So your score section might look like this: score: protein_score: additive psm_score: Comet:xcorr psm_score_type: additive One of the Accession values can also be used. For example, MS:1001493 actually means Posterior Error Probability . You would simply enter in MS:1001493 to utilize that output PSM score. So to use that value as the PSM score you might have this as your score section for your parameter file: score: protein_score: multiplicative_log psm_score: MS:1001493 psm_score_type: multiplicative Remember, MS:1001493 actually means Posterior Error Probability . Please refer to your specific search algorithms documentation to learn more about what each accession means. mzIdentML Lets inspect a standard MSGF+ based mzIdentML file for assistance in running pyProteinInference from a a mzIdentML file. When inspecting a file you might see a spectrum identification as such: <SpectrumIdentificationItem chargeState=\"3\" experimentalMassToCharge=\"907.1316528320312\" calculatedMassToCharge=\"907.1220092773438\" peptide_ref=\"Pep_RAVITSITATFNAGNHDRLVSCCR\" rank=\"1\" passThreshold=\"true\" id=\"SII_45025_1\"> <PeptideEvidenceRef peptideEvidence_ref=\"PepEv_4633556_RAVITSITATFNAGNHDRLVSCCR_113\"/> <cvParam cvRef=\"PSI-MS\" accession=\"MS:1002049\" name=\"MS-GF:RawScore\" value=\"48\"/> <cvParam cvRef=\"PSI-MS\" accession=\"MS:1002050\" name=\"MS-GF:DeNovoScore\" value=\"182\"/> <cvParam cvRef=\"PSI-MS\" accession=\"MS:1002052\" name=\"MS-GF:SpecEValue\" value=\"5.9486466E-10\"/> <cvParam cvRef=\"PSI-MS\" accession=\"MS:1002053\" name=\"MS-GF:EValue\" value=\"0.005017754\"/> <cvParam cvRef=\"PSI-MS\" accession=\"MS:1002054\" name=\"MS-GF:QValue\" value=\"8.469932E-4\"/> <cvParam cvRef=\"PSI-MS\" accession=\"MS:1002055\" name=\"MS-GF:PepQValue\" value=\"0.001055835\"/> <userParam name=\"IsotopeError\" value=\"0\"/> <userParam name=\"AssumedDissociationMethod\" value=\"HCD\"/> <userParam name=\"ExplainedIonCurrentRatio\" value=\"0.009252999\"/> <userParam name=\"NTermIonCurrentRatio\" value=\"2.9709993E-4\"/> <userParam name=\"CTermIonCurrentRatio\" value=\"0.008955899\"/> <userParam name=\"MS2IonCurrent\" value=\"4877230.5\"/> <userParam name=\"NumMatchedMainIons\" value=\"2\"/> <userParam name=\"MeanErrorAll\" value=\"0.383495\"/> <userParam name=\"StdevErrorAll\" value=\"0.29636142\"/> <userParam name=\"MeanErrorTop7\" value=\"0.383495\"/> <userParam name=\"StdevErrorTop7\" value=\"0.29636142\"/> <userParam name=\"MeanRelErrorAll\" value=\"0.383495\"/> <userParam name=\"StdevRelErrorAll\" value=\"0.29636142\"/> <userParam name=\"MeanRelErrorTop7\" value=\"0.383495\"/> <userParam name=\"StdevRelErrorTop7\" value=\"0.29636142\"/> </SpectrumIdentificationItem> When selecting custom scores to use from your mzIdentML file you can select any of the cvParam options under SpectrumIdentificationItem. For example, we might want to use the MS-GF:PepQValue ( MS:1002055 ). An important note when selecting custom scores from mzIdentML files is that you will actually input the accession listed above instead of the name . So, for selecting MS-GF:PepQValue , you would actually input MS:1002055 into the parameter file (See below). Also, given that MS:1002055 scores are better if they are lower we would insert it as a multiplicative score. The score section of the parameter file in this case might look like this: score: protein_score: multiplicative_log psm_score: MS:1002055 psm_score_type: multiplicative Remember, you can use any cvParam accession from your mzIdentML file. Make sure to note if the selected score is better when lower or higher to calculate protein scores correctly. pepXML Lets next inspect a standard MSFragger Version 4.0 based pepXML file for assistance in running pyProteinInference from a pepXML file See the following search_hit that comes from the above mentioned pepXML <search_hit peptide=\"NVPSVWRSARR\" massdiff=\"-0.0230712890625\" calc_neutral_pep_mass=\"1555.8896\" peptide_next_aa=\"K\" num_missed_cleavages=\"2\" num_tol_term=\"2\" protein_descr=\"Transcription initiation factor TFIID subunit 1 OS=Mus musculus OX=10090 GN=Taf1 PE=1 SV=2\" num_tot_proteins=\"1\" tot_num_ions=\"20\" hit_rank=\"1\" num_matched_ions=\"8\" protein=\"sp|Q80UV9|TAF1_MOUSE\" peptide_prev_aa=\"K\" is_rejected=\"0\"> <modification_info modified_peptide=\"n[230]NVPSVWRSARR\" mod_nterm_mass=\"230.17073\"> </modification_info> <search_score name=\"hyperscore\" value=\"15.64\"/> <search_score name=\"nextscore\" value=\"14.77\"/> <search_score name=\"expect\" value=\"1.563721e+00\"/> </search_hit> When selecting custom scores from a pepXML file you would use full string names for selecting a score to use as the PSM score to roll up to the protein level. For example, in the case above the user could select either \"hyperscore\", \"nextscore\", or \"expect\" score. Also, keep in mind that if a higher score is better one should select additive scoring while if a lower score is better one should select multiplicative scoring and a corresponding multiplicative scoring method. In this case lets say we select hyperscore. The score section of the parameter file might look like this: score: protein_score: additive psm_score: hyperscore psm_score_type: additive Other parameters to keep in mind for your specific idXML, mzIdentML, or pepXML searches would be the decoy symbol, inference type, etc. NOTE: Loading from either idXML, mzIdentML, or pepXML uses either pyOpenMS or pyteomics to read in the PSMs. As such, your search result files must be compatible with their standard readers. Standard Percolator Output Target Output PSMid score q-value posterior_error_prob peptide proteinIds 1.1 7.5 0.0048 0.0007 R.NYIQSLTQMPK.M MK14_HUMAN|Q16539 MK14_HUMAN|Q16539-2 MK14_HUMAN|Q16539-3 1.2 6.2 0.0035 0.0006 R.NTVASSSRSM*R.T FHDC1_HUMAN|Q9C0D6 Decoy Output PSMid score q-value posterior_error_prob peptide proteinIds 1.1 1.3 0.18 0.27 R.RSTITSRE.M decoy_MK14_HUMAN|Q16539 decoy_MK14_HUMAN|Q16539-2 decoy_MK14_HUMAN|Q16539-3 1.2 0.9 0.35 0.36 R.KKRKRSRKEM*R.T decoy_FHDC1_HUMAN|Q9C0D6 Decoy proteins should have some sort of decoy identifier to distinguish between target and decoy proteins. This is typically \"decoy_\" or \"##\". See the decoy symbol parameter option here for more information. These can also be combined into one file called \"Combined Output\". With the above standard input one could use q-value or posterior_error_prob as the PSM score. See Score Section of the parameter file explanation with multiplicative as psm_score_type and any of the multiplicative options for protein_score . For example standard input files please see any of the following files from the our repository: tests/data/test_perc_data_target.txt tests/data/test_perc_data_decoy.txt Custom Input PSMid custom_score peptide proteinIds 1.1 7.5 R.NYIQSLTQMPK.M MK14_HUMAN|Q16539 MK14_HUMAN|Q16539-2 1.2 6.2 R.NTVASSSRSM*R.T FHDC1_HUMAN|Q9C0D6 With the above custom input one could use custom_score as the PSM psm_score with additive as the psm_score_type and protein_score . For example custom input files please see any of the following files from the our repository: tests/data/test_perc_data_target_additive.txt tests/data/test_perc_data_decoy_additive.txt tests/data/test_perc_data_target_multiplicative.txt tests/data/test_perc_data_decoy_multiplicative.txt Fasta File This package was developed using standard Fasta files from Uniprot . Please see an example entry in a Fasta database below: >sp|Q5QNW6|H2B2F_HUMAN Histone H2B type 2-F OS=Homo sapiens OX=9606 GN=H2BC18 PE=1 SV=3 MPDPAKSAPAPKKGSKKAVTKVQKKDGKKRKRSRKESYSVYVYKVLKQVHPDTGISSKAM GIMNSFVNDIFERIAGEASRLAHYNKRSTITSREIQTAVRLLLPGELAKHAVSEGTKAVT KYTSSK","title":"Input Formats"},{"location":"input_format/#input-file-examples","text":"","title":"Input File Examples"},{"location":"input_format/#usage-with-idxml-mzidentml-pepxml-or-percolator-output","text":"See below for specific assistance in running pyProteinInference from either an idXML, mzIdentML, pepXML, or Percolator File.","title":"Usage with idXML, mzIdentML, pepXML, or Percolator Output"},{"location":"input_format/#idxml","text":"First, lets take a look at an idXML file from the popular OpenMS framework When inspecting an idXML you might see the following: <PeptideHit score=\"6.1267e-05\" sequence=\"KDVDDDGEEK\" charge=\"2\" aa_before=\"K\" aa_after=\"E\" start=\"85\" end=\"94\" protein_refs=\"PH_23231\" > <UserParam type=\"string\" name=\"target_decoy\" value=\"target\"/> <UserParam type=\"string\" name=\"MS:1002258\" value=\"16\"/> <UserParam type=\"string\" name=\"MS:1002259\" value=\"18\"/> <UserParam type=\"string\" name=\"num_matched_peptides\" value=\"514\"/> <UserParam type=\"int\" name=\"isotope_error\" value=\"0\"/> <UserParam type=\"float\" name=\"MS:1002252\" value=\"2.0533\"/> <UserParam type=\"float\" name=\"COMET:xcorr\" value=\"2.0533\"/> <UserParam type=\"float\" name=\"MS:1002253\" value=\"0.5447\"/> <UserParam type=\"float\" name=\"COMET:deltaCn\" value=\"0.5447\"/> <UserParam type=\"float\" name=\"MS:1002255\" value=\"825.899999999999977\"/> <UserParam type=\"float\" name=\"COMET:spscore\" value=\"825.899999999999977\"/> <UserParam type=\"float\" name=\"MS:1002256\" value=\"1.0\"/> <UserParam type=\"float\" name=\"COMET:sprank\" value=\"1.0\"/> <UserParam type=\"float\" name=\"MS:1002257\" value=\"3.3e-05\"/> <UserParam type=\"string\" name=\"protein_references\" value=\"unique\"/> <UserParam type=\"float\" name=\"COMET:deltaLCn\" value=\"0.0\"/> <UserParam type=\"float\" name=\"COMET:lnExpect\" value=\"-10.319002996497794\"/> <UserParam type=\"float\" name=\"COMET:lnNumSP\" value=\"6.242223265455165\"/> <UserParam type=\"float\" name=\"COMET:lnRankSP\" value=\"0.0\"/> <UserParam type=\"float\" name=\"COMET:IonFrac\" value=\"0.888888888888889\"/> <UserParam type=\"float\" name=\"expect\" value=\"3.3e-05\"/> <UserParam type=\"float\" name=\"MS:1001492\" value=\"0.647488\"/> <UserParam type=\"float\" name=\"MS:1001491\" value=\"6.1267e-05\"/> <UserParam type=\"float\" name=\"MS:1001493\" value=\"9.83689e-05\"/> </PeptideHit> In this case we see that a Comet search was performed. For selecting an input PSM score for rolling up to the protein level, you insert one of these selected UserParam names into the pyProteinInference parameter file in the score section. For example, lets say you wanted to use the Comet:xcorr value (for Comet Xcorr a higher score is better). So your score section might look like this: score: protein_score: additive psm_score: Comet:xcorr psm_score_type: additive One of the Accession values can also be used. For example, MS:1001493 actually means Posterior Error Probability . You would simply enter in MS:1001493 to utilize that output PSM score. So to use that value as the PSM score you might have this as your score section for your parameter file: score: protein_score: multiplicative_log psm_score: MS:1001493 psm_score_type: multiplicative Remember, MS:1001493 actually means Posterior Error Probability . Please refer to your specific search algorithms documentation to learn more about what each accession means.","title":"idXML"},{"location":"input_format/#mzidentml","text":"Lets inspect a standard MSGF+ based mzIdentML file for assistance in running pyProteinInference from a a mzIdentML file. When inspecting a file you might see a spectrum identification as such: <SpectrumIdentificationItem chargeState=\"3\" experimentalMassToCharge=\"907.1316528320312\" calculatedMassToCharge=\"907.1220092773438\" peptide_ref=\"Pep_RAVITSITATFNAGNHDRLVSCCR\" rank=\"1\" passThreshold=\"true\" id=\"SII_45025_1\"> <PeptideEvidenceRef peptideEvidence_ref=\"PepEv_4633556_RAVITSITATFNAGNHDRLVSCCR_113\"/> <cvParam cvRef=\"PSI-MS\" accession=\"MS:1002049\" name=\"MS-GF:RawScore\" value=\"48\"/> <cvParam cvRef=\"PSI-MS\" accession=\"MS:1002050\" name=\"MS-GF:DeNovoScore\" value=\"182\"/> <cvParam cvRef=\"PSI-MS\" accession=\"MS:1002052\" name=\"MS-GF:SpecEValue\" value=\"5.9486466E-10\"/> <cvParam cvRef=\"PSI-MS\" accession=\"MS:1002053\" name=\"MS-GF:EValue\" value=\"0.005017754\"/> <cvParam cvRef=\"PSI-MS\" accession=\"MS:1002054\" name=\"MS-GF:QValue\" value=\"8.469932E-4\"/> <cvParam cvRef=\"PSI-MS\" accession=\"MS:1002055\" name=\"MS-GF:PepQValue\" value=\"0.001055835\"/> <userParam name=\"IsotopeError\" value=\"0\"/> <userParam name=\"AssumedDissociationMethod\" value=\"HCD\"/> <userParam name=\"ExplainedIonCurrentRatio\" value=\"0.009252999\"/> <userParam name=\"NTermIonCurrentRatio\" value=\"2.9709993E-4\"/> <userParam name=\"CTermIonCurrentRatio\" value=\"0.008955899\"/> <userParam name=\"MS2IonCurrent\" value=\"4877230.5\"/> <userParam name=\"NumMatchedMainIons\" value=\"2\"/> <userParam name=\"MeanErrorAll\" value=\"0.383495\"/> <userParam name=\"StdevErrorAll\" value=\"0.29636142\"/> <userParam name=\"MeanErrorTop7\" value=\"0.383495\"/> <userParam name=\"StdevErrorTop7\" value=\"0.29636142\"/> <userParam name=\"MeanRelErrorAll\" value=\"0.383495\"/> <userParam name=\"StdevRelErrorAll\" value=\"0.29636142\"/> <userParam name=\"MeanRelErrorTop7\" value=\"0.383495\"/> <userParam name=\"StdevRelErrorTop7\" value=\"0.29636142\"/> </SpectrumIdentificationItem> When selecting custom scores to use from your mzIdentML file you can select any of the cvParam options under SpectrumIdentificationItem. For example, we might want to use the MS-GF:PepQValue ( MS:1002055 ). An important note when selecting custom scores from mzIdentML files is that you will actually input the accession listed above instead of the name . So, for selecting MS-GF:PepQValue , you would actually input MS:1002055 into the parameter file (See below). Also, given that MS:1002055 scores are better if they are lower we would insert it as a multiplicative score. The score section of the parameter file in this case might look like this: score: protein_score: multiplicative_log psm_score: MS:1002055 psm_score_type: multiplicative Remember, you can use any cvParam accession from your mzIdentML file. Make sure to note if the selected score is better when lower or higher to calculate protein scores correctly.","title":"mzIdentML"},{"location":"input_format/#pepxml","text":"Lets next inspect a standard MSFragger Version 4.0 based pepXML file for assistance in running pyProteinInference from a pepXML file See the following search_hit that comes from the above mentioned pepXML <search_hit peptide=\"NVPSVWRSARR\" massdiff=\"-0.0230712890625\" calc_neutral_pep_mass=\"1555.8896\" peptide_next_aa=\"K\" num_missed_cleavages=\"2\" num_tol_term=\"2\" protein_descr=\"Transcription initiation factor TFIID subunit 1 OS=Mus musculus OX=10090 GN=Taf1 PE=1 SV=2\" num_tot_proteins=\"1\" tot_num_ions=\"20\" hit_rank=\"1\" num_matched_ions=\"8\" protein=\"sp|Q80UV9|TAF1_MOUSE\" peptide_prev_aa=\"K\" is_rejected=\"0\"> <modification_info modified_peptide=\"n[230]NVPSVWRSARR\" mod_nterm_mass=\"230.17073\"> </modification_info> <search_score name=\"hyperscore\" value=\"15.64\"/> <search_score name=\"nextscore\" value=\"14.77\"/> <search_score name=\"expect\" value=\"1.563721e+00\"/> </search_hit> When selecting custom scores from a pepXML file you would use full string names for selecting a score to use as the PSM score to roll up to the protein level. For example, in the case above the user could select either \"hyperscore\", \"nextscore\", or \"expect\" score. Also, keep in mind that if a higher score is better one should select additive scoring while if a lower score is better one should select multiplicative scoring and a corresponding multiplicative scoring method. In this case lets say we select hyperscore. The score section of the parameter file might look like this: score: protein_score: additive psm_score: hyperscore psm_score_type: additive Other parameters to keep in mind for your specific idXML, mzIdentML, or pepXML searches would be the decoy symbol, inference type, etc. NOTE: Loading from either idXML, mzIdentML, or pepXML uses either pyOpenMS or pyteomics to read in the PSMs. As such, your search result files must be compatible with their standard readers.","title":"pepXML"},{"location":"input_format/#standard-percolator-output","text":"","title":"Standard Percolator Output"},{"location":"input_format/#target-output","text":"PSMid score q-value posterior_error_prob peptide proteinIds 1.1 7.5 0.0048 0.0007 R.NYIQSLTQMPK.M MK14_HUMAN|Q16539 MK14_HUMAN|Q16539-2 MK14_HUMAN|Q16539-3 1.2 6.2 0.0035 0.0006 R.NTVASSSRSM*R.T FHDC1_HUMAN|Q9C0D6","title":"Target Output"},{"location":"input_format/#decoy-output","text":"PSMid score q-value posterior_error_prob peptide proteinIds 1.1 1.3 0.18 0.27 R.RSTITSRE.M decoy_MK14_HUMAN|Q16539 decoy_MK14_HUMAN|Q16539-2 decoy_MK14_HUMAN|Q16539-3 1.2 0.9 0.35 0.36 R.KKRKRSRKEM*R.T decoy_FHDC1_HUMAN|Q9C0D6 Decoy proteins should have some sort of decoy identifier to distinguish between target and decoy proteins. This is typically \"decoy_\" or \"##\". See the decoy symbol parameter option here for more information. These can also be combined into one file called \"Combined Output\". With the above standard input one could use q-value or posterior_error_prob as the PSM score. See Score Section of the parameter file explanation with multiplicative as psm_score_type and any of the multiplicative options for protein_score . For example standard input files please see any of the following files from the our repository: tests/data/test_perc_data_target.txt tests/data/test_perc_data_decoy.txt","title":"Decoy Output"},{"location":"input_format/#custom-input","text":"PSMid custom_score peptide proteinIds 1.1 7.5 R.NYIQSLTQMPK.M MK14_HUMAN|Q16539 MK14_HUMAN|Q16539-2 1.2 6.2 R.NTVASSSRSM*R.T FHDC1_HUMAN|Q9C0D6 With the above custom input one could use custom_score as the PSM psm_score with additive as the psm_score_type and protein_score . For example custom input files please see any of the following files from the our repository: tests/data/test_perc_data_target_additive.txt tests/data/test_perc_data_decoy_additive.txt tests/data/test_perc_data_target_multiplicative.txt tests/data/test_perc_data_decoy_multiplicative.txt","title":"Custom Input"},{"location":"input_format/#fasta-file","text":"This package was developed using standard Fasta files from Uniprot . Please see an example entry in a Fasta database below: >sp|Q5QNW6|H2B2F_HUMAN Histone H2B type 2-F OS=Homo sapiens OX=9606 GN=H2BC18 PE=1 SV=3 MPDPAKSAPAPKKGSKKAVTKVQKKDGKKRKRSRKESYSVYVYKVLKQVHPDTGISSKAM GIMNSFVNDIFERIAGEASRLAHYNKRSTITSREIQTAVRLLLPGELAKHAVSEGTKAVT KYTSSK","title":"Fasta File"},{"location":"parameters/","text":"Yaml Parameter File Outline The Yaml Parameter File is the central location for all configurations for a given Protein Inference run and are summarized below: Note: These parameters are all optional. Please see the section Default Parameters for more information on defaults. General Parameter Description Type export Export Type can be one of: peptides , psms , psm_ids , long , q_value , q_value_all , q_value_comma_sep , leads , all , comma_sep . Suggested types are peptides , psms , and psm_ids as these produce square output. If there are multiple proteins per group the three mentioned types will report the leads only unless inference_type is peptide_centric which will output a ; separated list of proteins in the group OR if inference_type is parsimony and grouping_type is parsimonious_grouping which will also return a ; separated list of proteins in the parsimony group. Other types report on the peptide level with slightly different formats and whether or not to include leads only or all proteins. See here for an in-depth explanation of Export Types. String fdr False Discovery Rate to be marked as significant. Ex. 0.01 for 1% FDR. Numeric picker True / False on whether to run the Protein Picker algorithm. For more info click here . Bool tag A String tag that will be written into the result files. Ex. example_tag . String xml_parser The library to read idXML, mzID, or pepXML files from. Can be either openms or pyteomics . Default: openms . String Data Restriction Parameter Description Type pep_restriction Posterior Error Probability values to filter (i.e. 0.9 ). In this case PSMs with PEP values greater than 0.9 would be removed from the input. If PEP values are not in input please use None . Numeric peptide_length_restriction Peptide Length to filter on. (i.e. 7 ). If no filter is wanted please use None . Int q_value_restriction Q Values to filter. (i.e. 0.2 ). In this case PSMs with Q Values greater than 0.2 would be removed from the input. If Q Values are not in input please use None . Numeric custom_restriction Custom Value to filter. (i.e. 5 ). In this case PSMs with Custom value greater than / less than 5 would be removed from the input. If Not using a custom score please use None . NOTE : If a higher score is \"better\" for your score please set psm_score_type to additive . If a lower score is \"better\" please set psm_score_type parameter to multiplicative . Numeric max_allowed_alternative_proteins The maximum number of proteins a peptide is allowed to map to. Default: 50 . Int Score Parameter Description Type protein_score One of any of the following: multiplicative_log , best_peptide_per_protein , top_two_combined , additive , iterative_downweighted_log , downweighted_multiplicative_log , geometric_mean . Recommended: multiplicative_log . String psm_score PSM score to use for Protein Scoring. If using Percolator output as input this would either be posterior_error_prob or q-value . The string typed here should match the column/attribute in your input files EXACTLY . For more info on selecting PSM scores from your input files please see input file examples String psm_score_type The type of score that psm_score parameter is. Either multiplicative or additive . If a larger psm score is \"better\" than input additive (i.e. Mascot Ion Score, Xcorr, Percolator Score). If a smaller psm score is \"better\" than input multiplicative (i.e. Q Value, Posterior Error Probability). See below for more information. String Extra Score information The protein_score , psm_score , and psm_score_type methods must be compatible. If using a PSM score ( psm_score parameter) where the lower the score the better (i.e. posterior_error_prob or q-value ) then any protein_score can be used except additive . psm_score_type must also be set to multiplicative . If using a PSM score ( psm_score parameter) where the higher the score the better (i.e. Percolator Score, Mascot Ion Score, Xcorr) (Percolator Score is called psm_score - column name) in the tab delimited percolator output. Then protein_score and psm_score_type must both be additive . Identifiers Parameter Description Type decoy_symbol Symbol within Decoy Identifiers to distinguish between targets. (i.e \"##\", \"decoy_\", \"rev_\", \"DECOY_\"). This is important for Protein Picker and FDR calculation. String isoform_symbol Symbol that is present in isoform proteins only. (i.e. \" - \"). See below for more information. String reviewed_identifier_symbol Identifier to determine a reviewed vs unreviewed identifier. (i.e. \" sp| \"). See below for more information. String Extra Identifier information For the decoy_symbol an example of a target protein -> ex|protein and its decoy counterpart could be any of the following: ##ex|##protein , ##ex|protein , decoy_ex|protein . The decoy symbol just needs to be present within the string to be determined a decoy. For isoform_symbol and reviewed_identifier_symbol , these are used to assign priority in certain algorithms such as parsimony. For example, if we have canonical proteins, isoform proteins, and reviewed/unreviewed proteins in a given analysis; the priority would be established as follows: Reviewed Canonical, Reviewed Isoform, Unreviewed. This means that if two proteins map to the same peptides, the algorithm has to make a decision on which to pick. It would use the previous mentioned priority to pick the protein lead to report. Inference Parameter Description Type inference_type The Inference procedure to apply to the analysis. This can be parsimony , inclusion , exclusion , peptide_centric , or first_protein . Please see here for more information on the inference types. String grouping_type How to group proteins for a given inference_type . This can be subset_peptides , shared_peptides , parsimonious_grouping , or None . Typically subset_peptides or parsimonious_grouping is used. This parameter only effects grouped proteins and has no impact on protein leads. Suggested to use parsimonious_grouping if parsimony groups are wanted to be seen in the output when running parsimony. String Digest Parameter Description Type digest_type The enzyme used for digestion for the MS searches. (i.e. trypsin ). For reference, the database digestion is handled with pyteomics. Can be any expasy rule as defined here other common examples include: trypsin , chymotrypsin high specificity , chymotrypsin low specificity , lysc . String missed_cleavages The number of missed cleavages allowed for the MS searches. (i.e. 2 ) Int Parsimony These parameters are only used if parsimony is selected as inference_type . Parameter Description Type lp_solver This can be one of: pulp or None . This determines which linear program solver is used. Input None if not running parsimony . If running parsimony this needs to be set to pulp . String shared_peptides How to assign shared peptides for parsimony. Can be one of: all or best . all assigns shared peptides to all possible proteins in the output. best assigns shared peptides to the best scoring protein which is a \"winner take all\" approach. This is specific to the Parsimony Inference type. String Peptide Centric These parameters are only used if peptide_centric is selected as inference_type . Parameter Description Type max_identifiers The maximum number of proteins a peptide is allowed to map to. (i.e. 5 ). This serves to limit the number of protein groups that can be created due to highly homologous peptides. Int Default Parameters parameters: general: export: peptides fdr: 0.01 picker: True tag: example_tag xml_parser: openms data_restriction: pep_restriction: 0.9 peptide_length_restriction: 7 q_value_restriction: .9 custom_restriction: None max_allowed_alternative_proteins: 50 score: protein_score: best_peptide_per_protein psm_score: posterior_error_prob psm_score_type: multiplicative identifiers: decoy_symbol: \"##\" isoform_symbol: \"-\" reviewed_identifier_symbol: \"sp|\" inference: inference_type: parsimony grouping_type: parsimonious_grouping digest: digest_type: trypsin missed_cleavages: 3 parsimony: lp_solver: pulp shared_peptides: all peptide_centric: max_identifiers: 5","title":"Parameters"},{"location":"parameters/#yaml-parameter-file-outline","text":"The Yaml Parameter File is the central location for all configurations for a given Protein Inference run and are summarized below: Note: These parameters are all optional. Please see the section Default Parameters for more information on defaults.","title":"Yaml Parameter File Outline"},{"location":"parameters/#general","text":"Parameter Description Type export Export Type can be one of: peptides , psms , psm_ids , long , q_value , q_value_all , q_value_comma_sep , leads , all , comma_sep . Suggested types are peptides , psms , and psm_ids as these produce square output. If there are multiple proteins per group the three mentioned types will report the leads only unless inference_type is peptide_centric which will output a ; separated list of proteins in the group OR if inference_type is parsimony and grouping_type is parsimonious_grouping which will also return a ; separated list of proteins in the parsimony group. Other types report on the peptide level with slightly different formats and whether or not to include leads only or all proteins. See here for an in-depth explanation of Export Types. String fdr False Discovery Rate to be marked as significant. Ex. 0.01 for 1% FDR. Numeric picker True / False on whether to run the Protein Picker algorithm. For more info click here . Bool tag A String tag that will be written into the result files. Ex. example_tag . String xml_parser The library to read idXML, mzID, or pepXML files from. Can be either openms or pyteomics . Default: openms . String","title":"General"},{"location":"parameters/#data-restriction","text":"Parameter Description Type pep_restriction Posterior Error Probability values to filter (i.e. 0.9 ). In this case PSMs with PEP values greater than 0.9 would be removed from the input. If PEP values are not in input please use None . Numeric peptide_length_restriction Peptide Length to filter on. (i.e. 7 ). If no filter is wanted please use None . Int q_value_restriction Q Values to filter. (i.e. 0.2 ). In this case PSMs with Q Values greater than 0.2 would be removed from the input. If Q Values are not in input please use None . Numeric custom_restriction Custom Value to filter. (i.e. 5 ). In this case PSMs with Custom value greater than / less than 5 would be removed from the input. If Not using a custom score please use None . NOTE : If a higher score is \"better\" for your score please set psm_score_type to additive . If a lower score is \"better\" please set psm_score_type parameter to multiplicative . Numeric max_allowed_alternative_proteins The maximum number of proteins a peptide is allowed to map to. Default: 50 . Int","title":"Data Restriction"},{"location":"parameters/#score","text":"Parameter Description Type protein_score One of any of the following: multiplicative_log , best_peptide_per_protein , top_two_combined , additive , iterative_downweighted_log , downweighted_multiplicative_log , geometric_mean . Recommended: multiplicative_log . String psm_score PSM score to use for Protein Scoring. If using Percolator output as input this would either be posterior_error_prob or q-value . The string typed here should match the column/attribute in your input files EXACTLY . For more info on selecting PSM scores from your input files please see input file examples String psm_score_type The type of score that psm_score parameter is. Either multiplicative or additive . If a larger psm score is \"better\" than input additive (i.e. Mascot Ion Score, Xcorr, Percolator Score). If a smaller psm score is \"better\" than input multiplicative (i.e. Q Value, Posterior Error Probability). See below for more information. String","title":"Score"},{"location":"parameters/#extra-score-information","text":"The protein_score , psm_score , and psm_score_type methods must be compatible. If using a PSM score ( psm_score parameter) where the lower the score the better (i.e. posterior_error_prob or q-value ) then any protein_score can be used except additive . psm_score_type must also be set to multiplicative . If using a PSM score ( psm_score parameter) where the higher the score the better (i.e. Percolator Score, Mascot Ion Score, Xcorr) (Percolator Score is called psm_score - column name) in the tab delimited percolator output. Then protein_score and psm_score_type must both be additive .","title":"Extra Score information"},{"location":"parameters/#identifiers","text":"Parameter Description Type decoy_symbol Symbol within Decoy Identifiers to distinguish between targets. (i.e \"##\", \"decoy_\", \"rev_\", \"DECOY_\"). This is important for Protein Picker and FDR calculation. String isoform_symbol Symbol that is present in isoform proteins only. (i.e. \" - \"). See below for more information. String reviewed_identifier_symbol Identifier to determine a reviewed vs unreviewed identifier. (i.e. \" sp| \"). See below for more information. String","title":"Identifiers"},{"location":"parameters/#extra-identifier-information","text":"For the decoy_symbol an example of a target protein -> ex|protein and its decoy counterpart could be any of the following: ##ex|##protein , ##ex|protein , decoy_ex|protein . The decoy symbol just needs to be present within the string to be determined a decoy. For isoform_symbol and reviewed_identifier_symbol , these are used to assign priority in certain algorithms such as parsimony. For example, if we have canonical proteins, isoform proteins, and reviewed/unreviewed proteins in a given analysis; the priority would be established as follows: Reviewed Canonical, Reviewed Isoform, Unreviewed. This means that if two proteins map to the same peptides, the algorithm has to make a decision on which to pick. It would use the previous mentioned priority to pick the protein lead to report.","title":"Extra Identifier information"},{"location":"parameters/#inference","text":"Parameter Description Type inference_type The Inference procedure to apply to the analysis. This can be parsimony , inclusion , exclusion , peptide_centric , or first_protein . Please see here for more information on the inference types. String grouping_type How to group proteins for a given inference_type . This can be subset_peptides , shared_peptides , parsimonious_grouping , or None . Typically subset_peptides or parsimonious_grouping is used. This parameter only effects grouped proteins and has no impact on protein leads. Suggested to use parsimonious_grouping if parsimony groups are wanted to be seen in the output when running parsimony. String","title":"Inference"},{"location":"parameters/#digest","text":"Parameter Description Type digest_type The enzyme used for digestion for the MS searches. (i.e. trypsin ). For reference, the database digestion is handled with pyteomics. Can be any expasy rule as defined here other common examples include: trypsin , chymotrypsin high specificity , chymotrypsin low specificity , lysc . String missed_cleavages The number of missed cleavages allowed for the MS searches. (i.e. 2 ) Int","title":"Digest"},{"location":"parameters/#parsimony","text":"These parameters are only used if parsimony is selected as inference_type . Parameter Description Type lp_solver This can be one of: pulp or None . This determines which linear program solver is used. Input None if not running parsimony . If running parsimony this needs to be set to pulp . String shared_peptides How to assign shared peptides for parsimony. Can be one of: all or best . all assigns shared peptides to all possible proteins in the output. best assigns shared peptides to the best scoring protein which is a \"winner take all\" approach. This is specific to the Parsimony Inference type. String","title":"Parsimony"},{"location":"parameters/#peptide-centric","text":"These parameters are only used if peptide_centric is selected as inference_type . Parameter Description Type max_identifiers The maximum number of proteins a peptide is allowed to map to. (i.e. 5 ). This serves to limit the number of protein groups that can be created due to highly homologous peptides. Int","title":"Peptide Centric"},{"location":"parameters/#default-parameters","text":"parameters: general: export: peptides fdr: 0.01 picker: True tag: example_tag xml_parser: openms data_restriction: pep_restriction: 0.9 peptide_length_restriction: 7 q_value_restriction: .9 custom_restriction: None max_allowed_alternative_proteins: 50 score: protein_score: best_peptide_per_protein psm_score: posterior_error_prob psm_score_type: multiplicative identifiers: decoy_symbol: \"##\" isoform_symbol: \"-\" reviewed_identifier_symbol: \"sp|\" inference: inference_type: parsimony grouping_type: parsimonious_grouping digest: digest_type: trypsin missed_cleavages: 3 parsimony: lp_solver: pulp shared_peptides: all peptide_centric: max_identifiers: 5","title":"Default Parameters"},{"location":"pyproteininference_reference/","text":"Py Protein Inference Module","title":"PyProteinInference"},{"location":"pyproteininference_reference/#py-protein-inference-module","text":"","title":"Py Protein Inference Module"},{"location":"quickstart/","text":"Requirements Python 3.9 or greater. Python Packages : numpy , pyteomics , pyopenms , pulp , PyYAML , matplotlib , lxml , nicegui , pywebview , tqdm . These should be installed automatically during installation. Quick Start Guide Install the package using pip: pip install pyproteininference Run the standard commandline from an idXML file protein_inference_cli.py \\ -f /path/to/target/file1.idXML \\ -db /path/to/database/file.fasta \\ -y /path/to/params.yaml Run the standard commandline from a mzIdentML file protein_inference_cli.py \\ -f /path/to/target/file1.mzid \\ -db /path/to/database/file.fasta \\ -y /path/to/params.yaml Run the standard commandline from a pepXML file protein_inference_cli.py \\ -f /path/to/target/file1.pepXML \\ -db /path/to/database/file.fasta \\ -y /path/to/params.yaml Run the standard commandline tool with tab delimited results directly from percolator protein_inference_cli.py \\ -t /path/to/target/file.txt \\ -d /path/to/decoy/file.txt \\ -db /path/to/database/file.fasta \\ -y /path/to/params.yaml Specifying Parameters. The two most common parameters to change are the inference type, and the decoy symbol (for identifying decoy proteins vs target proteins). The parameters can be quickly altered by creating a file called params.yaml as follows: parameters: inference: inference_type: parsimony identifiers: decoy_symbol: \"decoy_\" The inference type can be one of: parsimony , peptide_centric , inclusion , exclusion , or first_protein . All parameters are optional, so you only need to define the ones you want to alter. Parameters that are not defined are set to default values. See here for the default parameters. Full Parameter Specifications See below for a full standard parameter file: Default Parameters parameters: general: export: peptides fdr: 0.01 picker: True tag: example_tag xml_parser: openms data_restriction: pep_restriction: 0.9 peptide_length_restriction: 7 q_value_restriction: .9 custom_restriction: None max_allowed_alternative_proteins: 50 score: protein_score: best_peptide_per_protein psm_score: posterior_error_prob psm_score_type: multiplicative identifiers: decoy_symbol: \"##\" isoform_symbol: \"-\" reviewed_identifier_symbol: \"sp|\" inference: inference_type: parsimony grouping_type: parsimonious_grouping digest: digest_type: trypsin missed_cleavages: 3 parsimony: lp_solver: pulp shared_peptides: all peptide_centric: max_identifiers: 5 These parameter options are just a suggestion. Please alter these for your specifications. For full description of each parameter and all options see the in depth parameter file description Run the standard commandline tool again, this time specifying the parameters as above: protein_inference_cli.py \\ -t /path/to/target/file.txt \\ -d /path/to/decoy/file.txt \\ -db /path/to/database/file.fasta \\ -y /path/to/params.yaml Running with docker Either Pull the image from docker hub: docker pull thinkle12/pyproteininference:latest Or Build the image with the following command (After having cloned the repository): git clone REPOSITORY_URL cd pyproteininference docker build -t pyproteininference:latest . Run the tool, making sure to volume mount in the directory with your input data and parameters. In the case below, that local directory would be /path/to/local/directory and the path in the container is /data docker run -v /path/to/local/directory/:/data \\ -it hinklet/pyproteininference:latest \\ python /usr/local/bin/protein_inference_cli.py \\ -f /data/input_file.txt \\ -db /data/database.fasta \\ -y /data/parameters.yaml \\ -o /data/ Get the commandline help via docker docker run thinkle12/pyproteininference:latest \\ python /usr/local/bin/protein_inference_cli.py --help","title":"Quick Start"},{"location":"quickstart/#requirements","text":"Python 3.9 or greater. Python Packages : numpy , pyteomics , pyopenms , pulp , PyYAML , matplotlib , lxml , nicegui , pywebview , tqdm . These should be installed automatically during installation.","title":"Requirements"},{"location":"quickstart/#quick-start-guide","text":"Install the package using pip: pip install pyproteininference Run the standard commandline from an idXML file protein_inference_cli.py \\ -f /path/to/target/file1.idXML \\ -db /path/to/database/file.fasta \\ -y /path/to/params.yaml Run the standard commandline from a mzIdentML file protein_inference_cli.py \\ -f /path/to/target/file1.mzid \\ -db /path/to/database/file.fasta \\ -y /path/to/params.yaml Run the standard commandline from a pepXML file protein_inference_cli.py \\ -f /path/to/target/file1.pepXML \\ -db /path/to/database/file.fasta \\ -y /path/to/params.yaml Run the standard commandline tool with tab delimited results directly from percolator protein_inference_cli.py \\ -t /path/to/target/file.txt \\ -d /path/to/decoy/file.txt \\ -db /path/to/database/file.fasta \\ -y /path/to/params.yaml Specifying Parameters. The two most common parameters to change are the inference type, and the decoy symbol (for identifying decoy proteins vs target proteins). The parameters can be quickly altered by creating a file called params.yaml as follows: parameters: inference: inference_type: parsimony identifiers: decoy_symbol: \"decoy_\" The inference type can be one of: parsimony , peptide_centric , inclusion , exclusion , or first_protein . All parameters are optional, so you only need to define the ones you want to alter. Parameters that are not defined are set to default values. See here for the default parameters. Full Parameter Specifications See below for a full standard parameter file:","title":"Quick Start Guide"},{"location":"quickstart/#default-parameters","text":"parameters: general: export: peptides fdr: 0.01 picker: True tag: example_tag xml_parser: openms data_restriction: pep_restriction: 0.9 peptide_length_restriction: 7 q_value_restriction: .9 custom_restriction: None max_allowed_alternative_proteins: 50 score: protein_score: best_peptide_per_protein psm_score: posterior_error_prob psm_score_type: multiplicative identifiers: decoy_symbol: \"##\" isoform_symbol: \"-\" reviewed_identifier_symbol: \"sp|\" inference: inference_type: parsimony grouping_type: parsimonious_grouping digest: digest_type: trypsin missed_cleavages: 3 parsimony: lp_solver: pulp shared_peptides: all peptide_centric: max_identifiers: 5 These parameter options are just a suggestion. Please alter these for your specifications. For full description of each parameter and all options see the in depth parameter file description Run the standard commandline tool again, this time specifying the parameters as above: protein_inference_cli.py \\ -t /path/to/target/file.txt \\ -d /path/to/decoy/file.txt \\ -db /path/to/database/file.fasta \\ -y /path/to/params.yaml Running with docker Either Pull the image from docker hub: docker pull thinkle12/pyproteininference:latest Or Build the image with the following command (After having cloned the repository): git clone REPOSITORY_URL cd pyproteininference docker build -t pyproteininference:latest . Run the tool, making sure to volume mount in the directory with your input data and parameters. In the case below, that local directory would be /path/to/local/directory and the path in the container is /data docker run -v /path/to/local/directory/:/data \\ -it hinklet/pyproteininference:latest \\ python /usr/local/bin/protein_inference_cli.py \\ -f /data/input_file.txt \\ -db /data/database.fasta \\ -y /data/parameters.yaml \\ -o /data/ Get the commandline help via docker docker run thinkle12/pyproteininference:latest \\ python /usr/local/bin/protein_inference_cli.py --help","title":"Default Parameters"},{"location":"supplementary/","text":"Supplementary Information Heuristic Algorithm The Heuristic Algorithm contains multiple steps listed below: The heuristic is a conservative algorithm that attempts to select a method that is not over or under reporting protein IDs based on all four inference methods executed. Empirical thresholds are set for Parsimony and Peptide Centric (lower threshold) as well as for Inclusion and Exclusion (upper threshold) which helps guide the decision making process for selecting a recommended method. These thresholds are separate for Inclusion and Exclusion because thess two algorithms typically over report Protein IDs (Inclusion) or under report Protein IDs (Exclusion). First each of the four main inference methods is executed. A finite number (100) of false discovery rates are genereted within the range [0, fdr_threshold] by increments of fdr_threshold * 0.01 . fdr_threshold is typically set to 0.05 . We loop over each FDR and the following is done at each specified FDR: The mean of the number of proteins identified at each FDR is calculated across all four methods. The number of standard deviations each method is from the mean at each FDR is calculated. The distribution of the number of standard deviations from the mean is plotted for each method on the same graph. See Heuristic Plot for an example. The peak of each distribution (each inference method) is identified and the absolute value of the x-axis coordinate is taken of each value. These are the heuristic scores. A recommended method is selected using the following conditions If the heuristic score for parsimony and peptide-centric is within 0.5 stdev of zero then both methods are recommended. If only one of the two methods is within 0.5 stdev of zero then that method is selected. If criteria is not met, continue to the next step. If the heuristic score for inclusion and exclusion is within 1 stdev of zero then both methods are recommended. If only one of the two methods is within 1 stdev of zero then that method is selected. (This step is only applicable if step 1 criteria is not met). If neither of these conditions above are met then the method with the heuristic score closest to zero (The least amount of stdev from the mean) is selected as the recommended method. Inference Types Inclusion Inclusion simply maps all peptides to all possible proteins. In this model we allow peptides to map to multiple proteins. This approach is useful if you want to analyze all possible proteins (even those that do not have any distinguishing peptides). Parsimony Parsimony is the process of taking the list of peptides and mapping them to the minimal set of protein identifiers available. This is a standard method that is good at limiting the overall number of proteins but still utilizing all selected peptides. This method allows shared peptides to map to more than one protein. Assuming that the proteins the peptides get mapped to also contain at least one unique peptide across the searches. Exclusion Exclusion maps all peptides to all possible proteins but removes any peptide from the search that is not distinguishing. This means that if a peptide maps to more than one protein it will be removed. With this inference model the database selection is very important. Ideally the database selected for searches should have limited redundancy. The redundancy is computed on the database level, meaning if a peptide maps to more than one protein that is contained in the Fasta database then that peptide will be removed from the analysis entirely. Exception: If two or more proteins within the database map to the exact same set of digested peptides the algorithm will select the first listed protein and discard the others. Peptide Centric For Peptide Centric inference all peptides are assigned to all possible proteins. Each peptide is then assigned a protein group based on the mentioned possible protein map. For protein group naming, the possible proteins for the peptides in the group are concatenated to a list separated by a semi-colon. This method is useful when there are a lot of shared peptides between multiple proteins. This will create new protein groups based on the shared peptides. This can sometimes more accurately represent the biological state. First Protein For the First Protein inference method each peptide gets assigned to one protein only. The protein that gets assigned to each peptide is the first listed protein. This is typically the first protein listed in the Fasta database file. This method is very simplistic but useful if you just want a quick way to get a sense of the protein FDR and are not worried as much about the peptide to protein mapping. Protein Picker Protein Picker is an algorithm that treats target and decoy proteins as pairs and is essentially target/decoy competition. If both the target and decoy proteins are identified from the searches when protein picker is run, then the target and decoy scores are compared with one another. The one with the better score is kept to continue on in the analysis while the one with the worse score gets filtered out of the analysis. This algorithm is integrated into other tools such as Percolator Protein Inference . Protein Score Types Score Type Description Best Peptide Per Protein Uses the best scoring PSM as the overall score for a given protein. This can be beneficial to use when proteins of interest map to few peptides. Multiplicative Log Multiplies all of the PSM scores together and then takes the log of the value (This only works for psm scores where lower is better). Top Two Combined Takes the two best scoring peptides and applies Multiplicative Log to them to get the protein score. Additive Adds all of the PSM scores together (This only works for scores where higher is better). Down Weighted Multiplicative Log Multiplicative Log but normalizes by the number of PSMs per protein. This method attempts to normalize small and large proteins. In a typical multiplicative log a larger protein would have an advantage at having a higher score than a small protein. Iterative Down Weighted Multiplicative Log Multiplicative Log but normalizes by the number of PSMs per protein in an iterative fashion. The more psm scores a protein has at each iteration each psm score will impact the overall protein score less and less. This method attempts to normalize small and large proteins. In a typical multiplicative log a larger protein would have an advantage at having a higher score than a small protein. Geometric Mean Takes the geometric mean of the PSMs per protein. Export Types It is advised to use the Standard Export Types OR q_value Standard Export Types All standard export types report back protein leads if there is protein sub-setting from the specific tool. (Parsimony can provide protein subsets but in these export types we only choose to report the group lead). The tables below represent what the output of each export type will look like. Exports are all in CSV format. peptide : This is a standard export type that reports back Protein, Score, Qvalue, and Peptide sequences in a square format. By default, peptide sequences are separated by a space \" \". Protein Score Q_Value Number_of_Peptides Identifier_Type GroupID Peptides RPOC_SHIF8|Q0SY12 82.89306334778564 0.0 12 Reviewed 1 CGVEVTQTK EGLNVLQY#FISTHGAR FATSDLNDLYR IALASPDMIR IPQESGGTK LIPAGTGYAYHQDR MGAEAIQALLK NTLLHEQWCDLLEENSVDAVK RVDYSGR VADLFEAR VIDIWAAANDR VTAEDVLKPGTADILVPR RAF1_HUMAN|P04049 70.7434325345954 0.0 6 Reviewed 2 CQTCGYKFHEHCSTK FQMFQLIDIAR QTAQGMDYLHAK SASEPSLHR VFLPNKQR WHGDVAVKILK ARAF_HUMAN|P10398 46.288402190472596 0.0 4 Reviewed 3 GYLSPDLSK QTAQGMDYLHAK SASEPSLHR TFFSLAFCDFCLK TCAF1_HUMAN|Q9Y4C2 19.048939464610452 0.0 2 Reviewed 4 LYLLTQMPH YCWMSTGLYIPGR HNRPU_HUMAN|Q00839 15.316094065486292 0.0 2 Reviewed 5 AEGGGGGGRPGAPAAGDGK LQAALDDEEAGGRPAMEPGNGSLDLGGDSAGR ##TCAF2_HUMAN|##A6NFQ2 2.4079456086518722 0.3333333333333333 1 Reviewed 6 MEPTPVPFCGAK psms : This is a standard export type that reports back Protein, Score, Qvalue, and PSMs in a square format. By default, PSMs are separated by a space \" \". Protein Score Q_Value Number_of_Peptides Identifier_Type GroupID Peptides RPOC_SHIF8|Q0SY12 82.89306334778564 0.0 12 Reviewed 1 CGVEVTQTK EGLNVLQY#FISTHGAR FATSDLNDLYR IALASPDMIR IPQESGGTK LIPAGTGYAYHQDR MGAEAIQALLK NTLLHEQWCDLLEENSVDAVK RVDYSGR VADLFEAR VIDIWAAANDR VTAEDVLKPGTADILVPR RAF1_HUMAN|P04049 70.7434325345954 0.0 6 Reviewed 2 CQTCGYKFHEHCSTK FQMFQLIDIAR QTAQGMDYLHAK SASEPSLHR VFLPNKQR WHGDVAVKILK ARAF_HUMAN|P10398 46.288402190472596 0.0 4 Reviewed 3 GYLSPDLSK QTAQGMDYLHAK SASEPSLHR TFFSLAFCDFCLK TCAF1_HUMAN|Q9Y4C2 19.048939464610452 0.0 2 Reviewed 4 LYLLTQMPH YCWMSTGLYIPGR HNRPU_HUMAN|Q00839 15.316094065486292 0.0 2 Reviewed 5 AEGGGGGGRPGAPAAGDGK LQAALDDEEAGGRPAMEPGNGSLDLGGDSAGR ##TCAF2_HUMAN|##A6NFQ2 2.4079456086518722 0.3333333333333333 1 Reviewed 6 MEPTPVPFCGAK psm_ids : This is a standard export type that reports back Protein, Score, Qvalue, and PSM Identifiers in a square format. By default, PSM IDs are separated by a space \" \". Values in Peptides column will be the PSMid values from data input. Protein Score Q_Value Number_of_Peptides Identifier_Type GroupID Peptides RPOC_SHIF8|Q0SY12 82.89306334778564 0.0 12 Reviewed 1 13 14 15 16 17 18 19 20 21 22 23 24 RAF1_HUMAN|P04049 70.7434325345954 0.0 6 Reviewed 2 1 2 3 4 5 8 ARAF_HUMAN|P10398 46.288402190472596 0.0 4 Reviewed 3 3 4 6 7 TCAF1_HUMAN|Q9Y4C2 19.048939464610452 0.0 2 Reviewed 4 10 9 HNRPU_HUMAN|Q00839 15.316094065486292 0.0 2 Reviewed 5 11 12 ##TCAF2_HUMAN|##A6NFQ2 2.4079456086518722 0.3333333333333333 1 Reviewed 6 27 long : This is a standard export type that reports back Protein, Score, Qvalue, and PSM Identifiers in a long format. Each Peptide for each Protein is listed down the file This format is good for merging to exterior data to swap with the inference reference. Protein Score Q_Value Number_of_Peptides Identifier_Type GroupID Peptides RPOC_SHIF8|Q0SY12 82.89306334778564 0.0 12 Reviewed 1 CGVEVTQTK RPOC_SHIF8|Q0SY12 82.89306334778564 0.0 12 Reviewed 1 MGAEAIQALLK RPOC_SHIF8|Q0SY12 82.89306334778564 0.0 12 Reviewed 1 NTLLHEQWCDLLEENSVDAVK RPOC_SHIF8|Q0SY12 82.89306334778564 0.0 12 Reviewed 1 RVDYSGR RPOC_SHIF8|Q0SY12 82.89306334778564 0.0 12 Reviewed 1 FATSDLNDLYR RPOC_SHIF8|Q0SY12 82.89306334778564 0.0 12 Reviewed 1 EGLNVLQY#FISTHGAR RPOC_SHIF8|Q0SY12 82.89306334778564 0.0 12 Reviewed 1 LIPAGTGYAYHQDR RPOC_SHIF8|Q0SY12 82.89306334778564 0.0 12 Reviewed 1 VADLFEAR RPOC_SHIF8|Q0SY12 82.89306334778564 0.0 12 Reviewed 1 IPQESGGTK RPOC_SHIF8|Q0SY12 82.89306334778564 0.0 12 Reviewed 1 IALASPDMIR RPOC_SHIF8|Q0SY12 82.89306334778564 0.0 12 Reviewed 1 VTAEDVLKPGTADILVPR RPOC_SHIF8|Q0SY12 82.89306334778564 0.0 12 Reviewed 1 VIDIWAAANDR RAF1_HUMAN|P04049 70.7434325345954 0.0 6 Reviewed 2 QTAQGMDYLHAK RAF1_HUMAN|P04049 70.7434325345954 0.0 6 Reviewed 2 VFLPNKQR RAF1_HUMAN|P04049 70.7434325345954 0.0 6 Reviewed 2 FQMFQLIDIAR RAF1_HUMAN|P04049 70.7434325345954 0.0 6 Reviewed 2 SASEPSLHR RAF1_HUMAN|P04049 70.7434325345954 0.0 6 Reviewed 2 CQTCGYKFHEHCSTK RAF1_HUMAN|P04049 70.7434325345954 0.0 6 Reviewed 2 WHGDVAVKILK ARAF_HUMAN|P10398 46.288402190472596 0.0 4 Reviewed 3 QTAQGMDYLHAK ARAF_HUMAN|P10398 46.288402190472596 0.0 4 Reviewed 3 GYLSPDLSK ARAF_HUMAN|P10398 46.288402190472596 0.0 4 Reviewed 3 TFFSLAFCDFCLK ARAF_HUMAN|P10398 46.288402190472596 0.0 4 Reviewed 3 SASEPSLHR TCAF1_HUMAN|Q9Y4C2 19.048939464610452 0.0 2 Reviewed 4 YCWMSTGLYIPGR TCAF1_HUMAN|Q9Y4C2 19.048939464610452 0.0 2 Reviewed 4 LYLLTQMPH HNRPU_HUMAN|Q00839 15.316094065486292 0.0 2 Reviewed 5 LQAALDDEEAGGRPAMEPGNGSLDLGGDSAGR HNRPU_HUMAN|Q00839 15.316094065486292 0.0 2 Reviewed 5 AEGGGGGGRPGAPAAGDGK ##TCAF2_HUMAN|##A6NFQ2 2.4079456086518722 0.3333333333333333 1 Reviewed 6 MEPTPVPFCGAK Legacy Export Types: All Legacy export types report on the peptide level and can either report protein group leads, or it can report all proteins (Proteins that are subsets of another protein will be reported in these cases for Parsimony). q_value : This is similar to the peptide export type other than that the peptide sequences reported will be put into a new column. This causes the resulting file to NOT be square. Protein Score Q_Value Number_of_Peptides Identifier_Type GroupID Peptides RPOC_SHIF8|Q0SY12 82.89306334778564 0.0 12 Reviewed 1 CGVEVTQTK EGLNVLQY#FISTHGAR FATSDLNDLYR IALASPDMIR IPQESGGTK LIPAGTGYAYHQDR MGAEAIQALLK NTLLHEQWCDLLEENSVDAVK RVDYSGR VADLFEAR VIDIWAAANDR VTAEDVLKPGTADILVPR RAF1_HUMAN|P04049 70.7434325345954 0.0 6 Reviewed 2 CQTCGYKFHEHCSTK FQMFQLIDIAR QTAQGMDYLHAK SASEPSLHR VFLPNKQR WHGDVAVKILK ARAF_HUMAN|P10398 46.288402190472596 0.0 4 Reviewed 3 GYLSPDLSK QTAQGMDYLHAK SASEPSLHR TFFSLAFCDFCLK TCAF1_HUMAN|Q9Y4C2 19.048939464610452 0.0 2 Reviewed 4 LYLLTQMPH YCWMSTGLYIPGR HNRPU_HUMAN|Q00839 15.316094065486292 0.0 2 Reviewed 5 AEGGGGGGRPGAPAAGDGK LQAALDDEEAGGRPAMEPGNGSLDLGGDSAGR ##TCAF2_HUMAN|##A6NFQ2 2.4079456086518722 0.3333333333333333 1 Reviewed 6 MEPTPVPFCGAK q_value_all : This is similar to q_value except all proteins will be reported (Not just leads). Protein Score Q_Value Number_of_Peptides Identifier_Type GroupID Peptides RPOC_SHIF8|Q0SY12 82.89306334778564 0.0 12 Reviewed 1 CGVEVTQTK EGLNVLQY#FISTHGAR FATSDLNDLYR IALASPDMIR IPQESGGTK LIPAGTGYAYHQDR MGAEAIQALLK NTLLHEQWCDLLEENSVDAVK RVDYSGR VADLFEAR VIDIWAAANDR VTAEDVLKPGTADILVPR RAF1_HUMAN|P04049 70.7434325345954 0.0 6 Reviewed 2 CQTCGYKFHEHCSTK FQMFQLIDIAR QTAQGMDYLHAK SASEPSLHR VFLPNKQR WHGDVAVKILK ARAF_HUMAN|P10398 46.288402190472596 0.0 4 Reviewed 2 GYLSPDLSK QTAQGMDYLHAK SASEPSLHR TFFSLAFCDFCLK BRAF_HUMAN|P15056 35.24577101017814 0.0 3 Reviewed 2 GYLSPDLSK QTAQGMDYLHAK VFLPNKQR ARAF_HUMAN|P10398 46.288402190472596 0.0 4 Reviewed 3 GYLSPDLSK QTAQGMDYLHAK SASEPSLHR TFFSLAFCDFCLK RAF1_HUMAN|P04049 70.7434325345954 0.0 6 Reviewed 3 CQTCGYKFHEHCSTK FQMFQLIDIAR QTAQGMDYLHAK SASEPSLHR VFLPNKQR WHGDVAVKILK BRAF_HUMAN|P15056 35.24577101017814 0.0 3 Reviewed 3 GYLSPDLSK QTAQGMDYLHAK VFLPNKQR TCAF1_HUMAN|Q9Y4C2 19.048939464610452 0.0 2 Reviewed 4 LYLLTQMPH YCWMSTGLYIPGR HNRPU_HUMAN|Q00839 15.316094065486292 0.0 2 Reviewed 5 AEGGGGGGRPGAPAAGDGK LQAALDDEEAGGRPAMEPGNGSLDLGGDSAGR B3KX72_HUMAN|B3KX72 15.316094065486292 0.0 2 Unreviewed 5 AEGGGGGGRPGAPAAGDGK LQAALDDEEAGGRPAMEPGNGSLDLGGDSAGR Q96BA7_HUMAN|Q96BA7 6.907755278982137 0.0 1 Unreviewed 5 LQAALDDEEAGGRPAMEPGNGSLDLGGDSAGR ##TCAF2_HUMAN|##A6NFQ2 2.4079456086518722 0.3333333333333333 1 Reviewed 6 MEPTPVPFCGAK q_value_comma_sep : This is similar to q_value except proteins in the group of a lead will be listed in a separate column denoted \"Other_Potential_Identifiers\". Peptide identifiers are not shown. Protein Score Q_Value Number_of_Peptides Identifier_Type GroupID Other_Potential_Identifiers RPOC_SHIF8|Q0SY12 82.89306334778564 0.0 12 Reviewed 1 RAF1_HUMAN|P04049 70.7434325345954 0.0 6 Reviewed 2 ARAF_HUMAN|P10398 BRAF_HUMAN|P15056 ARAF_HUMAN|P10398 46.288402190472596 0.0 4 Reviewed 3 RAF1_HUMAN|P04049 BRAF_HUMAN|P15056 TCAF1_HUMAN|Q9Y4C2 19.048939464610452 0.0 2 Reviewed 4 HNRPU_HUMAN|Q00839 15.316094065486292 0.0 2 Reviewed 5 B3KX72_HUMAN|B3KX72 Q96BA7_HUMAN|Q96BA7 ##TCAF2_HUMAN|##A6NFQ2 2.4079456086518722 0.3333333333333333 1 Reviewed 6 leads : This is similar to q_value except Q values are not reported and only proteins passing the fdr threshold set in the parameters will be reported. Protein Score Number_of_Peptides Identifier_Type GroupID Peptides RPOC_SHIF8|Q0SY12 82.89306334778564 12 Reviewed {1} CGVEVTQTK EGLNVLQY#FISTHGAR FATSDLNDLYR IALASPDMIR IPQESGGTK LIPAGTGYAYHQDR MGAEAIQALLK NTLLHEQWCDLLEENSVDAVK RVDYSGR VADLFEAR VIDIWAAANDR VTAEDVLKPGTADILVPR RAF1_HUMAN|P04049 70.7434325345954 6 Reviewed {2, 3} CQTCGYKFHEHCSTK FQMFQLIDIAR QTAQGMDYLHAK SASEPSLHR VFLPNKQR WHGDVAVKILK ARAF_HUMAN|P10398 46.288402190472596 4 Reviewed {2, 3} GYLSPDLSK QTAQGMDYLHAK SASEPSLHR TFFSLAFCDFCLK TCAF1_HUMAN|Q9Y4C2 19.048939464610452 2 Reviewed {4} LYLLTQMPH YCWMSTGLYIPGR HNRPU_HUMAN|Q00839 15.316094065486292 2 Reviewed {5} AEGGGGGGRPGAPAAGDGK LQAALDDEEAGGRPAMEPGNGSLDLGGDSAGR all : This is similar to q_value_all except Q values are not reported and only proteins passing the fdr threshold set in the parameters will be reported. Protein Score Number_of_Peptides Identifier_Type GroupID Peptides RPOC_SHIF8|Q0SY12 82.89306334778564 12 Reviewed {1} FATSDLNDLYR MGAEAIQALLK IPQESGGTK NTLLHEQWCDLLEENSVDAVK EGLNVLQY#FISTHGAR CGVEVTQTK LIPAGTGYAYHQDR VIDIWAAANDR VTAEDVLKPGTADILVPR IALASPDMIR RVDYSGR VADLFEAR RAF1_HUMAN|P04049 70.7434325345954 6 Reviewed {2, 3} SASEPSLHR FQMFQLIDIAR WHGDVAVKILK QTAQGMDYLHAK CQTCGYKFHEHCSTK VFLPNKQR ARAF_HUMAN|P10398 46.288402190472596 4 Reviewed {2, 3} SASEPSLHR QTAQGMDYLHAK GYLSPDLSK TFFSLAFCDFCLK BRAF_HUMAN|P15056 35.24577101017814 3 Reviewed {2, 3} QTAQGMDYLHAK GYLSPDLSK VFLPNKQR ARAF_HUMAN|P10398 46.288402190472596 4 Reviewed {2, 3} SASEPSLHR QTAQGMDYLHAK GYLSPDLSK TFFSLAFCDFCLK RAF1_HUMAN|P04049 70.7434325345954 6 Reviewed {2, 3} SASEPSLHR FQMFQLIDIAR WHGDVAVKILK QTAQGMDYLHAK CQTCGYKFHEHCSTK VFLPNKQR BRAF_HUMAN|P15056 35.24577101017814 3 Reviewed {2, 3} QTAQGMDYLHAK GYLSPDLSK VFLPNKQR TCAF1_HUMAN|Q9Y4C2 19.048939464610452 2 Reviewed {4} LYLLTQMPH YCWMSTGLYIPGR HNRPU_HUMAN|Q00839 15.316094065486292 2 Reviewed {5} AEGGGGGGRPGAPAAGDGK LQAALDDEEAGGRPAMEPGNGSLDLGGDSAGR B3KX72_HUMAN|B3KX72 15.316094065486292 2 Unreviewed {5} AEGGGGGGRPGAPAAGDGK LQAALDDEEAGGRPAMEPGNGSLDLGGDSAGR Q96BA7_HUMAN|Q96BA7 6.907755278982137 1 Unreviewed {5} LQAALDDEEAGGRPAMEPGNGSLDLGGDSAGR comma_sep : This is similar to q_value_comma_sep except Q values are not reported and only proteins passing the fdr threshold set in the parameters will be reported. Peptide identifiers are not shown. Protein Score Number_of_Peptides Identifier_Type GroupID Other_Potential_Identifiers RPOC_SHIF8|Q0SY12 82.89306334778564 12 Reviewed {1} RAF1_HUMAN|P04049 70.7434325345954 6 Reviewed {2, 3} ARAF_HUMAN|P10398 BRAF_HUMAN|P15056 ARAF_HUMAN|P10398 46.288402190472596 4 Reviewed {2, 3} RAF1_HUMAN|P04049 BRAF_HUMAN|P15056 TCAF1_HUMAN|Q9Y4C2 19.048939464610452 2 Reviewed {4} HNRPU_HUMAN|Q00839 15.316094065486292 2 Reviewed {5} B3KX72_HUMAN|B3KX72 Q96BA7_HUMAN|Q96BA7","title":"Supplementary Information"},{"location":"supplementary/#supplementary-information","text":"","title":"Supplementary Information"},{"location":"supplementary/#heuristic-algorithm","text":"The Heuristic Algorithm contains multiple steps listed below: The heuristic is a conservative algorithm that attempts to select a method that is not over or under reporting protein IDs based on all four inference methods executed. Empirical thresholds are set for Parsimony and Peptide Centric (lower threshold) as well as for Inclusion and Exclusion (upper threshold) which helps guide the decision making process for selecting a recommended method. These thresholds are separate for Inclusion and Exclusion because thess two algorithms typically over report Protein IDs (Inclusion) or under report Protein IDs (Exclusion). First each of the four main inference methods is executed. A finite number (100) of false discovery rates are genereted within the range [0, fdr_threshold] by increments of fdr_threshold * 0.01 . fdr_threshold is typically set to 0.05 . We loop over each FDR and the following is done at each specified FDR: The mean of the number of proteins identified at each FDR is calculated across all four methods. The number of standard deviations each method is from the mean at each FDR is calculated. The distribution of the number of standard deviations from the mean is plotted for each method on the same graph. See Heuristic Plot for an example. The peak of each distribution (each inference method) is identified and the absolute value of the x-axis coordinate is taken of each value. These are the heuristic scores. A recommended method is selected using the following conditions If the heuristic score for parsimony and peptide-centric is within 0.5 stdev of zero then both methods are recommended. If only one of the two methods is within 0.5 stdev of zero then that method is selected. If criteria is not met, continue to the next step. If the heuristic score for inclusion and exclusion is within 1 stdev of zero then both methods are recommended. If only one of the two methods is within 1 stdev of zero then that method is selected. (This step is only applicable if step 1 criteria is not met). If neither of these conditions above are met then the method with the heuristic score closest to zero (The least amount of stdev from the mean) is selected as the recommended method.","title":"Heuristic Algorithm"},{"location":"supplementary/#inference-types","text":"","title":"Inference Types"},{"location":"supplementary/#inclusion","text":"Inclusion simply maps all peptides to all possible proteins. In this model we allow peptides to map to multiple proteins. This approach is useful if you want to analyze all possible proteins (even those that do not have any distinguishing peptides).","title":"Inclusion"},{"location":"supplementary/#parsimony","text":"Parsimony is the process of taking the list of peptides and mapping them to the minimal set of protein identifiers available. This is a standard method that is good at limiting the overall number of proteins but still utilizing all selected peptides. This method allows shared peptides to map to more than one protein. Assuming that the proteins the peptides get mapped to also contain at least one unique peptide across the searches.","title":"Parsimony"},{"location":"supplementary/#exclusion","text":"Exclusion maps all peptides to all possible proteins but removes any peptide from the search that is not distinguishing. This means that if a peptide maps to more than one protein it will be removed. With this inference model the database selection is very important. Ideally the database selected for searches should have limited redundancy. The redundancy is computed on the database level, meaning if a peptide maps to more than one protein that is contained in the Fasta database then that peptide will be removed from the analysis entirely. Exception: If two or more proteins within the database map to the exact same set of digested peptides the algorithm will select the first listed protein and discard the others.","title":"Exclusion"},{"location":"supplementary/#peptide-centric","text":"For Peptide Centric inference all peptides are assigned to all possible proteins. Each peptide is then assigned a protein group based on the mentioned possible protein map. For protein group naming, the possible proteins for the peptides in the group are concatenated to a list separated by a semi-colon. This method is useful when there are a lot of shared peptides between multiple proteins. This will create new protein groups based on the shared peptides. This can sometimes more accurately represent the biological state.","title":"Peptide Centric"},{"location":"supplementary/#first-protein","text":"For the First Protein inference method each peptide gets assigned to one protein only. The protein that gets assigned to each peptide is the first listed protein. This is typically the first protein listed in the Fasta database file. This method is very simplistic but useful if you just want a quick way to get a sense of the protein FDR and are not worried as much about the peptide to protein mapping.","title":"First Protein"},{"location":"supplementary/#protein-picker","text":"Protein Picker is an algorithm that treats target and decoy proteins as pairs and is essentially target/decoy competition. If both the target and decoy proteins are identified from the searches when protein picker is run, then the target and decoy scores are compared with one another. The one with the better score is kept to continue on in the analysis while the one with the worse score gets filtered out of the analysis. This algorithm is integrated into other tools such as Percolator Protein Inference .","title":"Protein Picker"},{"location":"supplementary/#protein-score-types","text":"Score Type Description Best Peptide Per Protein Uses the best scoring PSM as the overall score for a given protein. This can be beneficial to use when proteins of interest map to few peptides. Multiplicative Log Multiplies all of the PSM scores together and then takes the log of the value (This only works for psm scores where lower is better). Top Two Combined Takes the two best scoring peptides and applies Multiplicative Log to them to get the protein score. Additive Adds all of the PSM scores together (This only works for scores where higher is better). Down Weighted Multiplicative Log Multiplicative Log but normalizes by the number of PSMs per protein. This method attempts to normalize small and large proteins. In a typical multiplicative log a larger protein would have an advantage at having a higher score than a small protein. Iterative Down Weighted Multiplicative Log Multiplicative Log but normalizes by the number of PSMs per protein in an iterative fashion. The more psm scores a protein has at each iteration each psm score will impact the overall protein score less and less. This method attempts to normalize small and large proteins. In a typical multiplicative log a larger protein would have an advantage at having a higher score than a small protein. Geometric Mean Takes the geometric mean of the PSMs per protein.","title":"Protein Score Types"},{"location":"supplementary/#export-types","text":"It is advised to use the Standard Export Types OR q_value","title":"Export Types"},{"location":"supplementary/#standard-export-types","text":"All standard export types report back protein leads if there is protein sub-setting from the specific tool. (Parsimony can provide protein subsets but in these export types we only choose to report the group lead). The tables below represent what the output of each export type will look like. Exports are all in CSV format. peptide : This is a standard export type that reports back Protein, Score, Qvalue, and Peptide sequences in a square format. By default, peptide sequences are separated by a space \" \". Protein Score Q_Value Number_of_Peptides Identifier_Type GroupID Peptides RPOC_SHIF8|Q0SY12 82.89306334778564 0.0 12 Reviewed 1 CGVEVTQTK EGLNVLQY#FISTHGAR FATSDLNDLYR IALASPDMIR IPQESGGTK LIPAGTGYAYHQDR MGAEAIQALLK NTLLHEQWCDLLEENSVDAVK RVDYSGR VADLFEAR VIDIWAAANDR VTAEDVLKPGTADILVPR RAF1_HUMAN|P04049 70.7434325345954 0.0 6 Reviewed 2 CQTCGYKFHEHCSTK FQMFQLIDIAR QTAQGMDYLHAK SASEPSLHR VFLPNKQR WHGDVAVKILK ARAF_HUMAN|P10398 46.288402190472596 0.0 4 Reviewed 3 GYLSPDLSK QTAQGMDYLHAK SASEPSLHR TFFSLAFCDFCLK TCAF1_HUMAN|Q9Y4C2 19.048939464610452 0.0 2 Reviewed 4 LYLLTQMPH YCWMSTGLYIPGR HNRPU_HUMAN|Q00839 15.316094065486292 0.0 2 Reviewed 5 AEGGGGGGRPGAPAAGDGK LQAALDDEEAGGRPAMEPGNGSLDLGGDSAGR ##TCAF2_HUMAN|##A6NFQ2 2.4079456086518722 0.3333333333333333 1 Reviewed 6 MEPTPVPFCGAK psms : This is a standard export type that reports back Protein, Score, Qvalue, and PSMs in a square format. By default, PSMs are separated by a space \" \". Protein Score Q_Value Number_of_Peptides Identifier_Type GroupID Peptides RPOC_SHIF8|Q0SY12 82.89306334778564 0.0 12 Reviewed 1 CGVEVTQTK EGLNVLQY#FISTHGAR FATSDLNDLYR IALASPDMIR IPQESGGTK LIPAGTGYAYHQDR MGAEAIQALLK NTLLHEQWCDLLEENSVDAVK RVDYSGR VADLFEAR VIDIWAAANDR VTAEDVLKPGTADILVPR RAF1_HUMAN|P04049 70.7434325345954 0.0 6 Reviewed 2 CQTCGYKFHEHCSTK FQMFQLIDIAR QTAQGMDYLHAK SASEPSLHR VFLPNKQR WHGDVAVKILK ARAF_HUMAN|P10398 46.288402190472596 0.0 4 Reviewed 3 GYLSPDLSK QTAQGMDYLHAK SASEPSLHR TFFSLAFCDFCLK TCAF1_HUMAN|Q9Y4C2 19.048939464610452 0.0 2 Reviewed 4 LYLLTQMPH YCWMSTGLYIPGR HNRPU_HUMAN|Q00839 15.316094065486292 0.0 2 Reviewed 5 AEGGGGGGRPGAPAAGDGK LQAALDDEEAGGRPAMEPGNGSLDLGGDSAGR ##TCAF2_HUMAN|##A6NFQ2 2.4079456086518722 0.3333333333333333 1 Reviewed 6 MEPTPVPFCGAK psm_ids : This is a standard export type that reports back Protein, Score, Qvalue, and PSM Identifiers in a square format. By default, PSM IDs are separated by a space \" \". Values in Peptides column will be the PSMid values from data input. Protein Score Q_Value Number_of_Peptides Identifier_Type GroupID Peptides RPOC_SHIF8|Q0SY12 82.89306334778564 0.0 12 Reviewed 1 13 14 15 16 17 18 19 20 21 22 23 24 RAF1_HUMAN|P04049 70.7434325345954 0.0 6 Reviewed 2 1 2 3 4 5 8 ARAF_HUMAN|P10398 46.288402190472596 0.0 4 Reviewed 3 3 4 6 7 TCAF1_HUMAN|Q9Y4C2 19.048939464610452 0.0 2 Reviewed 4 10 9 HNRPU_HUMAN|Q00839 15.316094065486292 0.0 2 Reviewed 5 11 12 ##TCAF2_HUMAN|##A6NFQ2 2.4079456086518722 0.3333333333333333 1 Reviewed 6 27 long : This is a standard export type that reports back Protein, Score, Qvalue, and PSM Identifiers in a long format. Each Peptide for each Protein is listed down the file This format is good for merging to exterior data to swap with the inference reference. Protein Score Q_Value Number_of_Peptides Identifier_Type GroupID Peptides RPOC_SHIF8|Q0SY12 82.89306334778564 0.0 12 Reviewed 1 CGVEVTQTK RPOC_SHIF8|Q0SY12 82.89306334778564 0.0 12 Reviewed 1 MGAEAIQALLK RPOC_SHIF8|Q0SY12 82.89306334778564 0.0 12 Reviewed 1 NTLLHEQWCDLLEENSVDAVK RPOC_SHIF8|Q0SY12 82.89306334778564 0.0 12 Reviewed 1 RVDYSGR RPOC_SHIF8|Q0SY12 82.89306334778564 0.0 12 Reviewed 1 FATSDLNDLYR RPOC_SHIF8|Q0SY12 82.89306334778564 0.0 12 Reviewed 1 EGLNVLQY#FISTHGAR RPOC_SHIF8|Q0SY12 82.89306334778564 0.0 12 Reviewed 1 LIPAGTGYAYHQDR RPOC_SHIF8|Q0SY12 82.89306334778564 0.0 12 Reviewed 1 VADLFEAR RPOC_SHIF8|Q0SY12 82.89306334778564 0.0 12 Reviewed 1 IPQESGGTK RPOC_SHIF8|Q0SY12 82.89306334778564 0.0 12 Reviewed 1 IALASPDMIR RPOC_SHIF8|Q0SY12 82.89306334778564 0.0 12 Reviewed 1 VTAEDVLKPGTADILVPR RPOC_SHIF8|Q0SY12 82.89306334778564 0.0 12 Reviewed 1 VIDIWAAANDR RAF1_HUMAN|P04049 70.7434325345954 0.0 6 Reviewed 2 QTAQGMDYLHAK RAF1_HUMAN|P04049 70.7434325345954 0.0 6 Reviewed 2 VFLPNKQR RAF1_HUMAN|P04049 70.7434325345954 0.0 6 Reviewed 2 FQMFQLIDIAR RAF1_HUMAN|P04049 70.7434325345954 0.0 6 Reviewed 2 SASEPSLHR RAF1_HUMAN|P04049 70.7434325345954 0.0 6 Reviewed 2 CQTCGYKFHEHCSTK RAF1_HUMAN|P04049 70.7434325345954 0.0 6 Reviewed 2 WHGDVAVKILK ARAF_HUMAN|P10398 46.288402190472596 0.0 4 Reviewed 3 QTAQGMDYLHAK ARAF_HUMAN|P10398 46.288402190472596 0.0 4 Reviewed 3 GYLSPDLSK ARAF_HUMAN|P10398 46.288402190472596 0.0 4 Reviewed 3 TFFSLAFCDFCLK ARAF_HUMAN|P10398 46.288402190472596 0.0 4 Reviewed 3 SASEPSLHR TCAF1_HUMAN|Q9Y4C2 19.048939464610452 0.0 2 Reviewed 4 YCWMSTGLYIPGR TCAF1_HUMAN|Q9Y4C2 19.048939464610452 0.0 2 Reviewed 4 LYLLTQMPH HNRPU_HUMAN|Q00839 15.316094065486292 0.0 2 Reviewed 5 LQAALDDEEAGGRPAMEPGNGSLDLGGDSAGR HNRPU_HUMAN|Q00839 15.316094065486292 0.0 2 Reviewed 5 AEGGGGGGRPGAPAAGDGK ##TCAF2_HUMAN|##A6NFQ2 2.4079456086518722 0.3333333333333333 1 Reviewed 6 MEPTPVPFCGAK","title":"Standard Export Types"},{"location":"supplementary/#legacy-export-types","text":"All Legacy export types report on the peptide level and can either report protein group leads, or it can report all proteins (Proteins that are subsets of another protein will be reported in these cases for Parsimony). q_value : This is similar to the peptide export type other than that the peptide sequences reported will be put into a new column. This causes the resulting file to NOT be square. Protein Score Q_Value Number_of_Peptides Identifier_Type GroupID Peptides RPOC_SHIF8|Q0SY12 82.89306334778564 0.0 12 Reviewed 1 CGVEVTQTK EGLNVLQY#FISTHGAR FATSDLNDLYR IALASPDMIR IPQESGGTK LIPAGTGYAYHQDR MGAEAIQALLK NTLLHEQWCDLLEENSVDAVK RVDYSGR VADLFEAR VIDIWAAANDR VTAEDVLKPGTADILVPR RAF1_HUMAN|P04049 70.7434325345954 0.0 6 Reviewed 2 CQTCGYKFHEHCSTK FQMFQLIDIAR QTAQGMDYLHAK SASEPSLHR VFLPNKQR WHGDVAVKILK ARAF_HUMAN|P10398 46.288402190472596 0.0 4 Reviewed 3 GYLSPDLSK QTAQGMDYLHAK SASEPSLHR TFFSLAFCDFCLK TCAF1_HUMAN|Q9Y4C2 19.048939464610452 0.0 2 Reviewed 4 LYLLTQMPH YCWMSTGLYIPGR HNRPU_HUMAN|Q00839 15.316094065486292 0.0 2 Reviewed 5 AEGGGGGGRPGAPAAGDGK LQAALDDEEAGGRPAMEPGNGSLDLGGDSAGR ##TCAF2_HUMAN|##A6NFQ2 2.4079456086518722 0.3333333333333333 1 Reviewed 6 MEPTPVPFCGAK q_value_all : This is similar to q_value except all proteins will be reported (Not just leads). Protein Score Q_Value Number_of_Peptides Identifier_Type GroupID Peptides RPOC_SHIF8|Q0SY12 82.89306334778564 0.0 12 Reviewed 1 CGVEVTQTK EGLNVLQY#FISTHGAR FATSDLNDLYR IALASPDMIR IPQESGGTK LIPAGTGYAYHQDR MGAEAIQALLK NTLLHEQWCDLLEENSVDAVK RVDYSGR VADLFEAR VIDIWAAANDR VTAEDVLKPGTADILVPR RAF1_HUMAN|P04049 70.7434325345954 0.0 6 Reviewed 2 CQTCGYKFHEHCSTK FQMFQLIDIAR QTAQGMDYLHAK SASEPSLHR VFLPNKQR WHGDVAVKILK ARAF_HUMAN|P10398 46.288402190472596 0.0 4 Reviewed 2 GYLSPDLSK QTAQGMDYLHAK SASEPSLHR TFFSLAFCDFCLK BRAF_HUMAN|P15056 35.24577101017814 0.0 3 Reviewed 2 GYLSPDLSK QTAQGMDYLHAK VFLPNKQR ARAF_HUMAN|P10398 46.288402190472596 0.0 4 Reviewed 3 GYLSPDLSK QTAQGMDYLHAK SASEPSLHR TFFSLAFCDFCLK RAF1_HUMAN|P04049 70.7434325345954 0.0 6 Reviewed 3 CQTCGYKFHEHCSTK FQMFQLIDIAR QTAQGMDYLHAK SASEPSLHR VFLPNKQR WHGDVAVKILK BRAF_HUMAN|P15056 35.24577101017814 0.0 3 Reviewed 3 GYLSPDLSK QTAQGMDYLHAK VFLPNKQR TCAF1_HUMAN|Q9Y4C2 19.048939464610452 0.0 2 Reviewed 4 LYLLTQMPH YCWMSTGLYIPGR HNRPU_HUMAN|Q00839 15.316094065486292 0.0 2 Reviewed 5 AEGGGGGGRPGAPAAGDGK LQAALDDEEAGGRPAMEPGNGSLDLGGDSAGR B3KX72_HUMAN|B3KX72 15.316094065486292 0.0 2 Unreviewed 5 AEGGGGGGRPGAPAAGDGK LQAALDDEEAGGRPAMEPGNGSLDLGGDSAGR Q96BA7_HUMAN|Q96BA7 6.907755278982137 0.0 1 Unreviewed 5 LQAALDDEEAGGRPAMEPGNGSLDLGGDSAGR ##TCAF2_HUMAN|##A6NFQ2 2.4079456086518722 0.3333333333333333 1 Reviewed 6 MEPTPVPFCGAK q_value_comma_sep : This is similar to q_value except proteins in the group of a lead will be listed in a separate column denoted \"Other_Potential_Identifiers\". Peptide identifiers are not shown. Protein Score Q_Value Number_of_Peptides Identifier_Type GroupID Other_Potential_Identifiers RPOC_SHIF8|Q0SY12 82.89306334778564 0.0 12 Reviewed 1 RAF1_HUMAN|P04049 70.7434325345954 0.0 6 Reviewed 2 ARAF_HUMAN|P10398 BRAF_HUMAN|P15056 ARAF_HUMAN|P10398 46.288402190472596 0.0 4 Reviewed 3 RAF1_HUMAN|P04049 BRAF_HUMAN|P15056 TCAF1_HUMAN|Q9Y4C2 19.048939464610452 0.0 2 Reviewed 4 HNRPU_HUMAN|Q00839 15.316094065486292 0.0 2 Reviewed 5 B3KX72_HUMAN|B3KX72 Q96BA7_HUMAN|Q96BA7 ##TCAF2_HUMAN|##A6NFQ2 2.4079456086518722 0.3333333333333333 1 Reviewed 6 leads : This is similar to q_value except Q values are not reported and only proteins passing the fdr threshold set in the parameters will be reported. Protein Score Number_of_Peptides Identifier_Type GroupID Peptides RPOC_SHIF8|Q0SY12 82.89306334778564 12 Reviewed {1} CGVEVTQTK EGLNVLQY#FISTHGAR FATSDLNDLYR IALASPDMIR IPQESGGTK LIPAGTGYAYHQDR MGAEAIQALLK NTLLHEQWCDLLEENSVDAVK RVDYSGR VADLFEAR VIDIWAAANDR VTAEDVLKPGTADILVPR RAF1_HUMAN|P04049 70.7434325345954 6 Reviewed {2, 3} CQTCGYKFHEHCSTK FQMFQLIDIAR QTAQGMDYLHAK SASEPSLHR VFLPNKQR WHGDVAVKILK ARAF_HUMAN|P10398 46.288402190472596 4 Reviewed {2, 3} GYLSPDLSK QTAQGMDYLHAK SASEPSLHR TFFSLAFCDFCLK TCAF1_HUMAN|Q9Y4C2 19.048939464610452 2 Reviewed {4} LYLLTQMPH YCWMSTGLYIPGR HNRPU_HUMAN|Q00839 15.316094065486292 2 Reviewed {5} AEGGGGGGRPGAPAAGDGK LQAALDDEEAGGRPAMEPGNGSLDLGGDSAGR all : This is similar to q_value_all except Q values are not reported and only proteins passing the fdr threshold set in the parameters will be reported. Protein Score Number_of_Peptides Identifier_Type GroupID Peptides RPOC_SHIF8|Q0SY12 82.89306334778564 12 Reviewed {1} FATSDLNDLYR MGAEAIQALLK IPQESGGTK NTLLHEQWCDLLEENSVDAVK EGLNVLQY#FISTHGAR CGVEVTQTK LIPAGTGYAYHQDR VIDIWAAANDR VTAEDVLKPGTADILVPR IALASPDMIR RVDYSGR VADLFEAR RAF1_HUMAN|P04049 70.7434325345954 6 Reviewed {2, 3} SASEPSLHR FQMFQLIDIAR WHGDVAVKILK QTAQGMDYLHAK CQTCGYKFHEHCSTK VFLPNKQR ARAF_HUMAN|P10398 46.288402190472596 4 Reviewed {2, 3} SASEPSLHR QTAQGMDYLHAK GYLSPDLSK TFFSLAFCDFCLK BRAF_HUMAN|P15056 35.24577101017814 3 Reviewed {2, 3} QTAQGMDYLHAK GYLSPDLSK VFLPNKQR ARAF_HUMAN|P10398 46.288402190472596 4 Reviewed {2, 3} SASEPSLHR QTAQGMDYLHAK GYLSPDLSK TFFSLAFCDFCLK RAF1_HUMAN|P04049 70.7434325345954 6 Reviewed {2, 3} SASEPSLHR FQMFQLIDIAR WHGDVAVKILK QTAQGMDYLHAK CQTCGYKFHEHCSTK VFLPNKQR BRAF_HUMAN|P15056 35.24577101017814 3 Reviewed {2, 3} QTAQGMDYLHAK GYLSPDLSK VFLPNKQR TCAF1_HUMAN|Q9Y4C2 19.048939464610452 2 Reviewed {4} LYLLTQMPH YCWMSTGLYIPGR HNRPU_HUMAN|Q00839 15.316094065486292 2 Reviewed {5} AEGGGGGGRPGAPAAGDGK LQAALDDEEAGGRPAMEPGNGSLDLGGDSAGR B3KX72_HUMAN|B3KX72 15.316094065486292 2 Unreviewed {5} AEGGGGGGRPGAPAAGDGK LQAALDDEEAGGRPAMEPGNGSLDLGGDSAGR Q96BA7_HUMAN|Q96BA7 6.907755278982137 1 Unreviewed {5} LQAALDDEEAGGRPAMEPGNGSLDLGGDSAGR comma_sep : This is similar to q_value_comma_sep except Q values are not reported and only proteins passing the fdr threshold set in the parameters will be reported. Peptide identifiers are not shown. Protein Score Number_of_Peptides Identifier_Type GroupID Other_Potential_Identifiers RPOC_SHIF8|Q0SY12 82.89306334778564 12 Reviewed {1} RAF1_HUMAN|P04049 70.7434325345954 6 Reviewed {2, 3} ARAF_HUMAN|P10398 BRAF_HUMAN|P15056 ARAF_HUMAN|P10398 46.288402190472596 4 Reviewed {2, 3} RAF1_HUMAN|P04049 BRAF_HUMAN|P15056 TCAF1_HUMAN|Q9Y4C2 19.048939464610452 2 Reviewed {4} HNRPU_HUMAN|Q00839 15.316094065486292 2 Reviewed {5} B3KX72_HUMAN|B3KX72 Q96BA7_HUMAN|Q96BA7","title":"Legacy Export Types:"}]}